sudo: false

matrix:
  include:
    - name: Docs
      os: linux
      dist: xenial
      sudo: true
      language: rust
      rust: stable
      cache:
        directories:
          - $HOME/.cargo
      before_cache:
        - rm -rf $HOME/.cargo/registry
      addons:
        apt:
          packages:
            - doxygen
            - python3-pip
      env:
        - DQCSIM_DEBUG=""
      install:
        - sudo add-apt-repository -y ppa:timsc/swig-3.0.12
        - sudo apt-get update
        - sudo apt-get install -y swig
        - mdbook --version || cargo install --debug mdbook --vers "0.2.3"
        - pip3 install setuptools wheel
        - pip3 install pdoc3
      script:
        - cargo doc --no-deps --all-features
        - python3 setup.py bdist_wheel
        - sudo pip3 install target/python/dist/*.whl
      before_deploy:
        - cd doc && make && mdbook test
      deploy:
        provider: pages
        skip-cleanup: true
        github-token: $GITHUB_TOKEN
        local-dir: target/book
        keep-history: false
        on:
          branch: master

    - &coverage
      name: Coverage Rust
      os: linux
      dist: xenial
      sudo: true
      language: rust
      rust: stable
      cache:
        directories:
          - $HOME/.cargo
          - $HOME/kcov
      env:
        - RUSTFLAGS="-C link-dead-code"
        - PATH=$HOME/kcov/bin/:$HOME/cmake/bin:$PATH
        - DQCSIM_DEBUG=""
      addons:
        apt:
          packages:
            # python
            - python3-pip
            # kcov
            - libcurl4-openssl-dev
            - libelf-dev
            - libdw-dev
            - cmake
            - gcc
            - binutils-dev
            - libiberty-dev
      before_install:
        - |
          ( kcov --version ||
            (
              wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
              tar xzf master.tar.gz
              mkdir -p kcov-build
              cd kcov-build
              cmake -DCMAKE_INSTALL_PREFIX=$HOME/kcov ../kcov-master
              make -j
              make install
              cd ..
            )
          ) || echo "Skipping kcov install"
      script:
        - cargo test --all-targets
        - |
          for file in target/debug/{dqcsim-*,core-*}; do
            [ -x "${file}" ] || continue;
            mkdir -p "target/cov/$(basename $file)";
            kcov --exclude-pattern=/.cargo,/usr/lib,/tests/ --exclude-region='#[cfg(test)]' --verify "target/cov/$(basename $file)" "$file";
          done
      after_success:
        # Upload to codecov
        - bash <(curl -s https://codecov.io/bash)

    - <<: *coverage
      name: Coverage Python
      install: &python-install
        - sudo add-apt-repository -y ppa:timsc/swig-3.0.12
        - sudo apt-get update
        - sudo apt-get install -y swig
        - pip3 install setuptools wheel
      script:
        - python3 setup.py build kcov

    - <<: *coverage
      name: "Coverage C++"
      script:
        - |
          mkdir -p $HOME/cmake &&
          curl -L https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C $HOME/cmake &&
          mkdir build &&
          cd build &&
          cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug &&
          make -j &&
          for file in `find dqcsim_tests_* -executable -and -type f`;
            do [ -x "${file}" ] || continue;
            mkdir -p "../target/cov/$(basename $file)";
            LD_LIBRARY_PATH=../target/debug/ kcov --exclude-pattern=/.cargo,/usr,/test --verify "../target/cov/$(basename $file)" "$file";
          done

    - &manylinux-wheels
      name: Manylinux1 wheels
      language: generic
      os: linux
      env:
        MANYLINUX_VERSION: "1"
      script:
        - cd python/tools
        - docker build --build-arg MANYLINUX=$MANYLINUX_VERSION -t dqcsim-py-manylinux -f Dockerfile .
        - cd ../..
        - docker run --rm -e DQCSIM_DEBUG= -v `pwd`:/io dqcsim-py-manylinux

    - <<: *manylinux-wheels
      name: Manylinux2010 wheels
      env:
        MANYLINUX_VERSION: "2010"
