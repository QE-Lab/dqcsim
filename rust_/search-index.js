var searchIndex={};
searchIndex["dqcsim"] = {"doc":"DQCsim: the Delft Quantum & Classical simulator","i":[[0,"common","dqcsim","Core modules common to both the plugin and host side of…",null,null],[0,"util","dqcsim::common","Utility functions that don't belong elsewhere.",null,null],[5,"log_2","dqcsim::common::util","Returns the log2 for a usize as an Option.",null,[[["usize"]],[["option",["usize"]],["usize"]]]],[5,"friendly_name","","Splits a CamelCase name into space-separated lowercase…",null,[[],["string"]]],[5,"friendly_enumerate","","Turns a string list into its natural language equivalent.",null,[[["str"],["option",["str"]]],["string"]]],[5,"friendly_enum_parse","","Parses a string representing an enum variant into the…",null,[[["str"]],["result"]]],[0,"channel","dqcsim::common","Channel abstractions.",null,null],[6,"CrossbeamChannel","dqcsim::common::channel","",null,null],[6,"IpcChannel","","",null,null],[6,"SimulatorChannel","","",null,null],[6,"PluginChannel","","",null,null],[6,"UpstreamChannel","","",null,null],[6,"DownstreamChannel","","",null,null],[8,"Channel","","Channel abstraction.",null,null],[16,"SenderItem","","The message type of the sender.",0,null],[16,"ReceiverItem","","The message type of the receiver.",0,null],[16,"Sender","","Sender side.",0,null],[16,"Receiver","","Receiver side;",0,null],[8,"Sender","","Sender side of a channel.",null,null],[16,"Item","","The message type of the channel.",1,null],[16,"Error","","The error type of the Result returned by the send function.",1,null],[10,"send","","Send a message.",1,[[["self"]],["result"]]],[8,"Receiver","","Receiver side of a channel.",null,null],[16,"Item","","The message type of the channel.",2,null],[16,"Error","","The error type of the Result returned by the recv function.",2,null],[10,"recv","","Receive a message.",2,[[["self"]],["result"]]],[0,"converter","dqcsim::common","Converter trait and ConverterMap collection.",null,null],[3,"FixedMatrixConverter","dqcsim::common::converter","Matrix converter object for fixed matrices.",null,null],[3,"RxMatrixConverter","","Matrix converter object for the RX matrix.",null,null],[3,"RyMatrixConverter","","Matrix converter object for the RY matrix.",null,null],[3,"RzMatrixConverter","","Matrix converter object for the RZ matrix.",null,null],[3,"PhaseMatrixConverter","","Matrix converter object for the phase submatrix.",null,null],[3,"PhaseKMatrixConverter","","Matrix converter object for the phase submatrix using θ =…",null,null],[3,"RMatrixConverter","","Matrix converter object for the R (= IBM U) gate.",null,null],[3,"UMatrixConverter","","Matrix converter object for any matrix of a certain size -…",null,null],[3,"UnitaryConverter","","Converter implementation for regular unitary gate matrices.",null,null],[3,"UnitaryGateConverter","","Converter implementation for unitary gates based on a…",null,null],[3,"MeasurementGateConverter","","Converter implementation for measurement gates.",null,null],[3,"PrepGateConverter","","Converter implementation for prep gates.",null,null],[3,"CustomGateConverter","","Lambda-based converter implementation for unitary gate…",null,null],[3,"ConverterMap","","K: user-defined key for identifying which converter to use…",null,null],[8,"FromArb","","A type that can be constructed from (part of) an ArbData…",null,null],[10,"from_arb","","Construct from the given ArbData, taking the parameters…",3,[[["arbdata"]],["result"]]],[8,"ToArb","","A type that can be converted into (part of) an ArbData…",null,null],[10,"to_arb","","Convert self to ArbData parameters and add them to the…",4,[[["arbdata"]]]],[8,"Converter","","A type that can be used as a Converter.",null,null],[16,"Input","","The more generic detector input type = constructor output…",5,null],[16,"Output","","The more specific detector output type = constructor input…",5,null],[10,"detect","","The detect function implements the detector function. The…",5,[[["self"]],[["option"],["result",["option"]]]]],[10,"construct","","The construct function implements the opposite of the…",5,[[["self"]],["result"]]],[8,"MatrixConverter","","A type that represents a possibly parameterized matrix…",null,null],[16,"Parameters","","For parameterized matrices, this is the type of the…",6,null],[10,"detect_matrix","","Detects whether the given matrix has a recognized form and…",6,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[10,"construct_matrix","","Constructs a matrix from the given parameter set.",6,[[["self"]],[["matrix"],["result",["matrix"]]]]],[8,"MatrixConverterArb","","A type that represents a possibly parameterized matrix…",null,null],[10,"detect_matrix_arb","","Detects whether the given matrix has a recognized form and…",7,[[["bool"],["arbdata"],["f64"],["self"],["matrix"]],[["result",["bool"]],["bool"]]]],[10,"construct_matrix_arb","","Constructs a matrix by taking information from the given…",7,[[["arbdata"],["self"]],[["matrix"],["result",["matrix"]]]]],[0,"error","dqcsim::common","Error-handling.",null,null],[8,"ResultExt","dqcsim::common::error","Re-export the [`ResultExt`] trait which adds the…",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with…",8,[[],[["compat"],["result",["compat"]]]]],[10,"context","","Wraps the error type in a context type.",8,[[["d"]],[["result",["context"]],["context"]]]],[10,"with_context","","Wraps the error type in a context type generated by…",8,[[["f"]],[["result",["context"]],["context"]]]],[3,"Error","","[`Error`] type for this crate.",null,null],[4,"ErrorKind","","",null,null],[13,"LogError","","LogError",9,null],[13,"InvalidArgument","","Generic invalid argument: use when a function is called in…",9,null],[13,"InvalidOperation","","Generic invalid operation: use when a function is called…",9,null],[13,"Other","","Generic error: use when an error doesn't fit in the above…",9,null],[13,"Multiple","","Wraps multiple errors that occurred asynchronously.",9,null],[13,"ITCError","","For propagating crossbeam_channel errors.",9,null],[13,"IPCError","","For propagating ipc_channel errors.",9,null],[13,"IoError","","For propagating std::io::Error errors.",9,null],[13,"TermError","","For propagating term::Error errors.",9,null],[5,"log_err","","Shorthand for producing a LogError.",null,[[],["result"]]],[5,"oe_log_err","","Shorthand for producing a LogError in an or_else function.",null,[[]]],[5,"inv_arg","","Shorthand for producing an invalid argument error.",null,[[],["result"]]],[5,"oe_inv_arg","","Shorthand for producing an invalid argument error in an…",null,[[]]],[5,"inv_op","","Shorthand for producing an invalid operation error.",null,[[],["result"]]],[5,"oe_inv_op","","Shorthand for producing an invalid operation error in an…",null,[[]]],[5,"err","","Shorthand for producing an error that does not fit in any…",null,[[],["result"]]],[5,"oe_err","","err() but for or_else() functions.",null,[[]]],[6,"Result","","Internal [`Result`] type which uses the crate's [`Error`]…",null,null],[0,"gates","dqcsim::common","Gate types and definitions.",null,null],[4,"UnitaryGateType","dqcsim::common::gates","An abstract gate type.",null,null],[13,"I","","Identity.",10,null],[13,"X","","Pauli-X.",10,null],[13,"Y","","Pauli-Y.",10,null],[13,"Z","","Pauli-Z.",10,null],[13,"H","","Hadamard.",10,null],[13,"S","","Phase.",10,null],[13,"SDAG","","S† (conjugate transpose of S).",10,null],[13,"T","","T.",10,null],[13,"TDAG","","T† (conjugate transpose of T).",10,null],[13,"RX90","","90 degree rotation around X-axis.",10,null],[13,"RXM90","","minus 90 degree rotation around X-axis.",10,null],[13,"RX180","","180 degree rotation around X-axis.",10,null],[13,"RY90","","90 degree rotation around Y-axis.",10,null],[13,"RYM90","","minus 90 degree rotation around Y-axis.",10,null],[13,"RY180","","180 degree rotation around Y-axis.",10,null],[13,"RZ90","","90 degree rotation around Y-axis.",10,null],[13,"RZM90","","minus 90 degree rotation around Z-axis.",10,null],[13,"RZ180","","180 degree rotation around Z-axis.",10,null],[13,"RX","","Arbitrary rotation around X-axis.",10,null],[13,"RY","","Arbitrary rotation around Y-axis.",10,null],[13,"RZ","","Arbitrary rotation around Z-axis.",10,null],[13,"Phase","","Arbitrary rotation around Z-axis, global phase chosen such…",10,null],[13,"PhaseK","","Same as Phase, but with θ = π/2^k​.",10,null],[13,"R","","Arbitrary rotation around X-, Y- and Z-axis.",10,null],[13,"SWAP","","Swap.",10,null],[13,"SQSWAP","","Square root of Swap.",10,null],[13,"U","","Abstract unitary gate with number of target qubits…",10,null],[4,"UnboundUnitaryGate","","An unbound gate type.",null,null],[13,"I","","Identity.",11,null],[13,"X","","Pauli-X.",11,null],[13,"Y","","Pauli-Y.",11,null],[13,"Z","","Pauli-Z.",11,null],[13,"H","","Hadamard.",11,null],[13,"S","","Phase.",11,null],[13,"SDAG","","S† (conjugate transpose of S).",11,null],[13,"T","","T.",11,null],[13,"TDAG","","T† (conjugate transpose of T).",11,null],[13,"RX90","","90 degree rotation around X-axis.",11,null],[13,"RXM90","","minus 90 degree rotation around X-axis.",11,null],[13,"RX180","","180 degree rotation around X-axis.",11,null],[13,"RY90","","90 degree rotation around Y-axis.",11,null],[13,"RYM90","","minus 90 degree rotation around Y-axis.",11,null],[13,"RY180","","180 degree rotation around Y-axis.",11,null],[13,"RZ90","","90 degree rotation around Y-axis.",11,null],[13,"RZM90","","minus 90 degree rotation around Z-axis.",11,null],[13,"RZ180","","180 degree rotation around Z-axis.",11,null],[13,"RX","","Arbitrary rotation around X-axis with specified angle (θ).",11,null],[13,"RY","","Arbitrary rotation around Y-axis with specified angle (θ).",11,null],[13,"RZ","","Arbitrary rotation around Z-axis with specified angle (θ).",11,null],[13,"Phase","","Arbitrary rotation around Z-axis, global phase chosen such…",11,null],[13,"PhaseK","","Same as Phase, but with θ = π/2^k​.",11,null],[13,"R","","Arbitrary rotation around X-, Y- and Z-axis with specified…",11,null],[13,"SWAP","","Swap.",11,null],[13,"SQSWAP","","Square root of Swap.",11,null],[13,"U","","Abstract unitary gate with a reference to specified…",11,null],[4,"BoundUnitaryGate","","A bound gate type.",null,null],[13,"I","","Identity with specified qubit target.",12,null],[13,"X","","Pauli-X with specified qubit target.",12,null],[13,"Y","","Pauli-Y with specified qubit target.",12,null],[13,"Z","","Pauli-Z with specified qubit target.",12,null],[13,"H","","Hadamard with specified qubit target.",12,null],[13,"S","","Phase with specified qubit target.",12,null],[13,"SDAG","","S† (conjugate transpose of S) with specified qubit target.",12,null],[13,"T","","T with specified qubit target.",12,null],[13,"TDAG","","T† (conjugate transpose of T) with specified qubit target.",12,null],[13,"RX90","","90 degree rotation around X-axis with specified qubit…",12,null],[13,"RXM90","","minus 90 degree rotation around X-axi with specified qubit…",12,null],[13,"RX180","","180 degree rotation around X-axis with specified qubit…",12,null],[13,"RY90","","90 degree rotation around Y-axis with specified qubit…",12,null],[13,"RYM90","","minus 90 degree rotation around Y-axis with specified…",12,null],[13,"RY180","","180 degree rotation around Y-axis with specified qubit…",12,null],[13,"RZ90","","90 degree rotation around Y-axis with specified qubit…",12,null],[13,"RZM90","","minus 90 degree rotation around Z-axis with specified…",12,null],[13,"RZ180","","180 degree rotation around Z-axis with specified qubit…",12,null],[13,"RX","","Arbitrary rotation around X-axis with specified angle (θ)…",12,null],[13,"RY","","Arbitrary rotation around Y-axis with specified angle (θ)…",12,null],[13,"RZ","","Arbitrary rotation around Z-axis with specified angle (θ)…",12,null],[13,"Phase","","Arbitrary rotation around Z-axis, global phase chosen such…",12,null],[13,"PhaseK","","Same as Phase, but with θ = π/2^k​.",12,null],[13,"R","","Arbitrary rotation around X-, Y- and Z-axis with specified…",12,null],[13,"SWAP","","Swap with specified qubit targets.",12,null],[13,"SQSWAP","","Square root of Swap with specified qubit targets.",12,null],[13,"U","","Abstract unitary gate with a reference to specified…",12,null],[0,"log","dqcsim::common","A log thread and thread-local log proxy combination.",null,null],[3,"LoglevelIter","dqcsim::common::log","",null,null],[3,"LoglevelFilterIter","","",null,null],[3,"Metadata","","Log record metadata.",null,null],[3,"LogRecord","","A log record.",null,null],[4,"Loglevel","","Loglevel for log records.",null,null],[13,"Fatal","","This loglevel is to be used for reporting a fatal error,…",13,null],[13,"Error","","This loglevel is to be used for reporting or propagating a…",13,null],[13,"Warn","","This loglevel is to be used for reporting that a called…",13,null],[13,"Note","","This loglevel is to be used for reporting information…",13,null],[13,"Info","","This loglevel is to be used for reporting information NOT…",13,null],[13,"Debug","","This loglevel is to be used for reporting debugging…",13,null],[13,"Trace","","This loglevel is to be used for reporting debugging…",13,null],[4,"LoglevelFilter","","LoglevelFilter for implementors of the Log trait.",null,null],[13,"Off","","A level lower than all log levels.",14,null],[13,"Fatal","","Corresponds to the `Fatal` log level.",14,null],[13,"Error","","Corresponds to the `Error` log level.",14,null],[13,"Warn","","Corresponds to the `Warn` log level.",14,null],[13,"Note","","Corresponds to the `Note` log level.",14,null],[13,"Info","","Corresponds to the `Info` log level.",14,null],[13,"Debug","","Corresponds to the `Debug` log level.",14,null],[13,"Trace","","Corresponds to the `Trace` log level.",14,null],[5,"init","","Initialize the thread-local loggers.",null,[[["vec",["box"]],["box",["log"]]],["result"]]],[5,"deinit","","Deinitialize the thread-local loggers.",null,[[],["result"]]],[0,"callback","","",null,null],[3,"LogCallback","dqcsim::common::log::callback","Log callback function structure.",null,null],[12,"callback","","The callback function to call.",15,null],[12,"filter","","Verbosity level for calling the log callback function.",15,null],[0,"proxy","dqcsim::common::log","A generic log proxy implementation.",null,null],[3,"LogProxy","dqcsim::common::log::proxy","A [`LogProxy`] is a logger implementation (`Log`) which…",null,null],[0,"stdio","dqcsim::common::log","Utility function to spawn a log proxy implementation to…",null,null],[5,"proxy_stdio","dqcsim::common::log::stdio","Forward standard i/o to log channel.",null,[[["sender",["logrecord"]],["box",["read"]],["read"],["loglevel"],["logrecord"]],["joinhandle"]]],[0,"tee_file","dqcsim::common::log","",null,null],[3,"TeeFileConfiguration","dqcsim::common::log::tee_file","Represents a tee file configuration for the logging system.",null,null],[12,"filter","","",16,null],[12,"file","","",16,null],[3,"TeeFile","","TeeFile is the combination of a TeeFileConfiguration and a…",null,null],[12,"configuration","","The TeeFileConfiguration",17,null],[4,"TeeFileError","","Error structure used for reporting TeeFile errors.",null,null],[13,"ParseError","","",18,null],[0,"thread","dqcsim::common::log","A log thread implementation.",null,null],[3,"LogThread","dqcsim::common::log::thread","",null,null],[17,"LOGGERS","dqcsim::common::log","The thread-local loggers.",null,null],[8,"Log","","The Log trait.",null,null],[10,"name","","Returns the name of this logger",19,[[["self"]],["str"]]],[10,"enabled","","Returns true if the provided loglevel is enabled",19,[[["self"],["loglevel"]],["bool"]]],[10,"log","","Log the incoming record",19,[[["logrecord"],["self"]]]],[0,"protocol","dqcsim::common","Defines the protocols for all forms of communication.",null,null],[3,"FrontendRunRequest","dqcsim::common::protocol","Frontend run request. See `SimulatorToPlugin::RunRequest`.",null,null],[12,"start","","When specified, the frontend's `run()` callback must be…",20,null],[12,"messages","","Messages queued up through the host's `send()` function,…",20,null],[3,"PluginAcceptUpstreamRequest","","",null,null],[3,"PluginInitializeRequest","","Plugin initialization request. See…",null,null],[12,"downstream","","Gatestream endpoint for the downstream plugin to connect to.",21,null],[12,"plugin_type","","The expected plugin type.",21,null],[12,"seed","","Random seed.",21,null],[12,"log_configuration","","Configuration for the logging subsystem of the plugin.",21,null],[12,"log_channel","","Sender side of the log channel. Can be used by a Plugin to…",21,null],[3,"PluginUserInitializeRequest","","Plugin user initialization request. See…",null,null],[12,"init_cmds","","Vec with initialization commands.",22,null],[3,"FrontendRunResponse","","Frontend run response.",null,null],[12,"return_value","","When specified, the frontend's `run()` callback terminated…",23,null],[12,"messages","","Messages queued up through the frontend's `send()`…",23,null],[3,"PluginInitializeResponse","","Initialization response.",null,null],[12,"upstream","","Gatestream endpoint for the upstream plugin to connect to.",24,null],[12,"metadata","","Plugin metadata information from the `PluginDefinition`…",24,null],[4,"SimulatorToPlugin","","Simulator/host to plugin requests.",null,null],[13,"Initialize","","Request to initialize the plugin.",25,null],[13,"AcceptUpstream","","Request to complete the connection with the upstream plugin.",25,null],[13,"UserInitialize","","Request to run user initialization code.",25,null],[13,"Abort","","Request to abort the simulation and stop the plugin.",25,null],[13,"RunRequest","","Passes control from the host to the frontend plugin.",25,null],[13,"ArbRequest","","Requests execution of the given `ArbCmd` by the plugin.",25,null],[4,"PluginToSimulator","","Plugin to simulator responses.",null,null],[13,"Success","","Success response to requests that don't return data..",26,null],[13,"Failure","","Failure response to any request, containing an error…",26,null],[13,"Initialized","","Success response to `SimulatorToPlugin::Initialize`.",26,null],[13,"RunResponse","","Success response to `SimulatorToPlugin::RunRequest`.",26,null],[13,"ArbResponse","","Success response to `SimulatorToPlugin::ArbRequest`.",26,null],[4,"GatestreamDown","","Gatestream requests/downstream messages.",null,null],[13,"Pipelined","","A pipelined gatestream request.",27,null],[13,"ArbRequest","","Requests execution of the given `ArbCmd` by the plugin.",27,null],[4,"PipelinedGatestreamDown","","Enumeration of pipelined gatestream messages.",null,null],[13,"Allocate","","Requests allocation of a number of qubits.",28,null],[13,"Free","","Requests that one or more qubits be freed.",28,null],[13,"Gate","","Requests execution of a gate.",28,null],[13,"Advance","","Advances the simulation by the specified number of cycles.",28,null],[4,"GatestreamUp","","Gatestream responses/upstream messages.",null,null],[13,"CompletedUpTo","","Acknowledges one or more requests.",29,null],[13,"Failure","","Indicates that the message with the specified sequence…",29,null],[13,"Measured","","Specifies that the specified qubit was measured.",29,null],[13,"Advanced","","Indicates that the simulation was advanced by the…",29,null],[13,"ArbSuccess","","Indicates that a `GatestreamDown::ArbRequest` was executed…",29,null],[13,"ArbFailure","","Indicates that a `GatestreamDown::ArbRequest` failed.",29,null],[6,"PluginToLogThread","","",null,null],[0,"types","dqcsim::common","This module defines some types that are shared between…",null,null],[3,"SequenceNumber","dqcsim::common::types","Represents a sequence number used within a gate stream.",null,null],[3,"SequenceNumberGenerator","","Struct used to generate sequence numbers.",null,null],[3,"Cycle","","Represents a simulation cycle.",null,null],[3,"QubitRef","","Represents a reference to a qubit.",null,null],[3,"QubitRefGenerator","","Struct used to generate new qubit references.",null,null],[3,"ArbData","","Represents an ArbData structure, consisting of an…",null,null],[3,"ArbCmd","","Represents an ArbCmd structure, consisting of interface…",null,null],[3,"Gate","","Represents a type of quantum or mixed quantum-classical…",null,null],[12,"data","","User-defined classical data to pass along with the gate.",30,null],[3,"QubitMeasurementResult","","Represents a qubit measurement result.",null,null],[12,"qubit","","The measured qubit.",31,null],[12,"value","","The measured value.",31,null],[12,"data","","Implementation-specific additional data, such as the…",31,null],[3,"PluginMetadata","","Contains information about a plugin implementation.",null,null],[3,"Matrix","","Matrix wrapper for `Gate` matrices.",null,null],[4,"GateType","","Represents a type of quantum or mixed quantum-classical…",null,null],[13,"Unitary","","Unitary gates have one or more target qubits, zero or more…",32,null],[13,"Measurement","","Measurement gates have one or more measured qubits and a…",32,null],[13,"Prep","","Prep gates have one or more target qubits and a 2x2…",32,null],[13,"Custom","","Custom gates perform a user-defined mixed…",32,null],[4,"QubitMeasurementValue","","",null,null],[13,"Undefined","","The value is unknown because the qubit has not been…",33,null],[13,"Zero","","The qubit was measured to be zero.",33,null],[13,"One","","The qubit was measured to be one.",33,null],[4,"PluginType","","Enumeration of the three types of plugins.",null,null],[13,"Frontend","","",34,null],[13,"Operator","","",34,null],[13,"Backend","","",34,null],[4,"Basis","","Predefined measurement/prep bases.",null,null],[13,"X","","",35,null],[13,"Y","","",35,null],[13,"Z","","",35,null],[6,"CycleDelta","","Represents a cycle difference.",null,null],[6,"Cycles","","Represents a number of cycles to advance by.",null,null],[0,"host","dqcsim","Core modules used by the host side of DQCsim.",null,null],[0,"accelerator","dqcsim::host","Host API interface trait (start, wait, send, recv).",null,null],[8,"Accelerator","dqcsim::host::accelerator","Trait containing the primitive operations for an…",null,null],[10,"start","","Starts a program on the accelerator.",36,[[["self"]],["result"]]],[10,"wait","","Waits for the accelerator to finish its current program.",36,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[10,"send","","Sends a message to the accelerator.",36,[[["self"]],["result"]]],[10,"recv","","Waits for the accelerator to send a message to us.",36,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[0,"configuration","dqcsim::host","Configuration structures for the plugins and simulator.",null,null],[3,"Seed","dqcsim::host::configuration","Represents a 64-bit random seed. Can be converted to and…",null,null],[12,"value","","The random seed.",37,null],[3,"PluginLogConfiguration","","Configuration structure for the plugin logging system.",null,null],[12,"name","","Instance name of the plugin used to identify it in log…",38,null],[12,"verbosity","","Specifies the verbosity of the messages sent to DQCsim.",38,null],[12,"tee_files","","Specifies the tee file configurations for this plugin.",38,null],[3,"PluginProcessConfiguration","","Represents the complete configuration for a plugin running…",null,null],[12,"name","","Name of the plugin, used to refer to the plugin by the log…",39,null],[12,"specification","","Plugin specification, i.e. the plugin executable and…",39,null],[12,"functional","","The functional configuration of the plugin, i.e. the…",39,null],[12,"nonfunctional","","The nonfunctional configuration of the plugin, i.e. any…",39,null],[3,"PluginProcessFunctionalConfiguration","","Structure describing the functional configuration of a…",null,null],[12,"init","","ArbCmd objects passed to the plugin initialization RPC.",40,null],[12,"env","","Environment variable overrides for the plugin process.",40,null],[12,"work","","The working directory for the plugin process.",40,null],[3,"PluginProcessNonfunctionalConfiguration","","Structure describing the NONfunctional configuration of a…",null,null],[12,"verbosity","","Specifies the verbosity of the messages sent to DQCsim.",41,null],[12,"tee_files","","Specifies the tee file configuration for this plugin.",41,null],[12,"stdout_mode","","Specifies how the stdout stream of the plugin should be…",41,null],[12,"stderr_mode","","Specifies how the stderr stream of the plugin should be…",41,null],[12,"accept_timeout","","Specifies the timeout for connecting to the plugin after…",41,null],[12,"shutdown_timeout","","Specifies the timeout duration to wait for the plugin to…",41,null],[3,"PluginProcessSpecification","","Plugin specification, consisting of the executable…",null,null],[12,"executable","","The executable filename of the plugin.",42,null],[12,"script","","If specified, the executable is expected to be an…",42,null],[12,"typ","","Plugin type.",42,null],[3,"PluginThreadConfiguration","","Represents the complete configuration for a plugin running…",null,null],[12,"closure","","The closure that's called from within the plugin thread.…",43,null],[12,"plugin_type","","The type of plugin that the closure is expected to start.",43,null],[12,"init_cmds","","The vector of `ArbCmd`s passed to the `initialize()`…",43,null],[12,"log_configuration","","Configuration for the logging subsystem of the plugin.",43,null],[3,"SimulatorConfiguration","","The complete configuration for a DQCsim run.",null,null],[12,"seed","","The random seed for the simulation.",44,null],[12,"stderr_level","","The verbosity for logging messages to stderr.",44,null],[12,"tee_files","","Logs messages to the specified file in addition to stderr.…",44,null],[12,"log_callback","","Optional log callback function.",44,null],[12,"dqcsim_level","","The verbosity for DQCsim itself.",44,null],[12,"plugins","","The plugin configurations, from front to back.",44,null],[12,"reproduction_path_style","","The path style used when writing the reproduction file.",44,null],[4,"EnvMod","","Represents an environment variable modification.",null,null],[13,"Set","","Sets the environment variable `key` to `value`.",45,null],[12,"key","dqcsim::host::configuration::EnvMod","",45,null],[12,"value","","",45,null],[13,"Remove","dqcsim::host::configuration","Clears (undefines) the environment variable `key`.",45,null],[12,"key","dqcsim::host::configuration::EnvMod","",45,null],[4,"StreamCaptureMode","dqcsim::host::configuration","Stream capture mode.",null,null],[13,"Pass","","Don't capture the stream. That is, let it pass through to…",46,null],[13,"Null","","Disable the stream by piping it to /dev/null (or by…",46,null],[13,"Capture","","Capture the stream to turn each line into a log message…",46,null],[4,"Timeout","","Represents a timeout parameter, which may be infinite.",null,null],[13,"Duration","","The duration specifies the maximum timeout.",47,null],[13,"Infinite","","The timeout is infinite.",47,null],[4,"ReproductionPathStyle","","Represents the style for storing paths in a reproduction…",null,null],[13,"Keep","","Specifies that paths should be saved the same way they…",48,null],[13,"Relative","","Specifies that all paths should be saved relative to…",48,null],[13,"Absolute","","Specifies that all paths should be saved canonically, i.e.…",48,null],[8,"PluginConfiguration","","Trait for types of configurations. The only thing that…",null,null],[10,"instantiate","","Instantiates the plugin.",49,[[["box"]],[["box",["plugin"]],["plugin"]]]],[10,"get_log_configuration","","Returns the log configuratin of the plugin. Note that this…",49,[[["self"]],["pluginlogconfiguration"]]],[10,"get_type","","Returns the plugin type.",49,[[["self"]],["plugintype"]]],[10,"get_reproduction","","Returns the PluginReproduction when possible. Otherwise…",49,[[["self"],["reproductionpathstyle"]],[["result",["pluginreproduction"]],["pluginreproduction"]]]],[10,"limit_verbosity","","Limits the verbosity of the messages reported to the…",49,[[["self"],["loglevelfilter"]]]],[10,"set_default_name","","Sets the default name for this plugin.",49,[[["self"],["string"]]]],[0,"plugin","dqcsim::host","Contains structs that manage the lifetime and connections…",null,null],[0,"process","dqcsim::host::plugin","Implementation of the plugin trait for running the plugin…",null,null],[3,"PluginProcess","dqcsim::host::plugin::process","A Plugin running in a child process.",null,null],[0,"thread","dqcsim::host::plugin","Implementation of the plugin trait for running the plugin…",null,null],[3,"PluginThread","dqcsim::host::plugin::thread","",null,null],[6,"PluginThreadClosure","","",null,null],[8,"Plugin","dqcsim::host::plugin","The Plugin trait, implemented by all Plugins used in a…",null,null],[10,"spawn","","Spawn the Plugin. The Plugin should spawn the actual…",50,[[["self"],["logthread"]],["result"]]],[10,"plugin_type","","Returns the PluginType of this plugin.",50,[[["self"]],["plugintype"]]],[10,"init_cmds","","Returns the vector of `ArbCmd`s that are to be passed to…",50,[[["self"]],[["vec",["arbcmd"]],["arbcmd"]]]],[10,"log_configuration","","Returns the logging configuration for this plugin.",50,[[["self"]],["pluginlogconfiguration"]]],[10,"rpc","","Send the SimulatorToPlugin message to the plugin.",50,[[["self"],["simulatortoplugin"]],[["result",["plugintosimulator"]],["plugintosimulator"]]]],[0,"reproduction","dqcsim::host","Simulation run reproduction functionality.",null,null],[3,"PluginReproduction","dqcsim::host::reproduction","The contents of a plugin configuration in a reproduction…",null,null],[12,"name","","Name of the plugin, used to refer to the plugin by the log…",51,null],[12,"executable","","The executable filename of the plugin.",51,null],[12,"script","","If specified, the executable is expected to be an…",51,null],[12,"functional","","The functional configuration of the plugin, i.e. the…",51,null],[3,"PluginModification","","Represents a nonfunctional configuration modification for…",null,null],[12,"name","","Name of the referenced plugin.",52,null],[12,"verbosity","","Specifies the verbosity of the messages sent to DQCsim. If…",52,null],[12,"tee_files","","Specifies the tee file configuration for this plugin.",52,null],[12,"stdout_mode","","Specifies how the stdout stream of the plugin should be…",52,null],[12,"stderr_mode","","Specifies how the stderr stream of the plugin should be…",52,null],[12,"accept_timeout","","Specifies the timeout for connecting to the plugin after…",52,null],[12,"shutdown_timeout","","Specifies the timeout for connecting to the plugin after…",52,null],[3,"Reproduction","","The contents of a reproduction file.",null,null],[12,"seed","","The random seed for the simulation.",53,null],[12,"plugins","","The plugin configurations, from front to back.",53,null],[12,"host_calls","","The sequence of host calls to make.",53,null],[12,"hostname","","The host on which the run was performed, if available.",53,null],[12,"username","","The user that performed the run.",53,null],[12,"workdir","","The working directory that the run was performed in.",53,null],[4,"HostCall","","Represents a host API call.",null,null],[13,"Start","","",54,null],[13,"Wait","","",54,null],[13,"Send","","",54,null],[13,"Recv","","",54,null],[13,"Yield","","",54,null],[13,"Arb","","",54,null],[0,"simulation","dqcsim::host","Simulation instance: launches, connects, communicates…",null,null],[3,"Simulation","dqcsim::host::simulation","Simulation instance.",null,null],[6,"Pipeline","","Type alias for a pipeline of Plugin trait objects.",null,null],[0,"simulator","dqcsim::host","Simulator driver: wraps a `Simulation` and a `LogThread`.",null,null],[3,"Simulator","dqcsim::host::simulator","Simulator driver instance.",null,null],[12,"simulation","","The Simulation driven by this Simulator.",55,null],[0,"plugin","dqcsim","Core modules used by the plugin side of DQCsim.",null,null],[0,"connection","dqcsim::plugin","Plugin to simulator connection wrapper.",null,null],[3,"Connection","dqcsim::plugin::connection","Plugin to Simulator connection wrapper.",null,null],[4,"IncomingMessage","","Incoming messages variants.",null,null],[13,"Simulator","","",56,null],[13,"Upstream","","",56,null],[13,"Downstream","","",56,null],[4,"OutgoingMessage","","Outgoing messages variants.",null,null],[13,"Simulator","","",57,null],[13,"Upstream","","",57,null],[13,"Downstream","","",57,null],[0,"definition","dqcsim::plugin","Module containing the structures used to define a plugin…",null,null],[3,"PluginDefinition","dqcsim::plugin::definition","Defines a plugin.",null,null],[12,"initialize","","Initialization callback.",58,null],[12,"drop","","Finalization callback.",58,null],[12,"run","","Run callback for frontends.",58,null],[12,"allocate","","Qubit allocation callback for operators and backends.",58,null],[12,"free","","Qubit deallocation callback for operators and backends.",58,null],[12,"gate","","Gate execution callback for operators and backends.",58,null],[12,"modify_measurement","","Measurement modification callback for operators.",58,null],[12,"advance","","Callback for advancing time for operators and backends.",58,null],[12,"upstream_arb","","Callback function for handling an arb from upstream for…",58,null],[12,"host_arb","","Callback function for handling an arb from the host.",58,null],[0,"log","dqcsim::plugin","Utility function to setup logging for a Plugin instance.",null,null],[5,"setup_logging","dqcsim::plugin::log","Setup logging for a Plugin instance.",null,[[["pluginlogconfiguration"],["ipcsender",["logrecord"]],["logrecord"]],["result"]]],[0,"state","dqcsim::plugin","Module containing the runtime structures of a plugin.",null,null],[3,"PluginState","dqcsim::plugin::state","Structure representing the state of a plugin.",null,null],[0,"bindings","dqcsim","This module provides a C interface to the DQCsim simulator.",null,null],[3,"dqcs_plugin_state_t","dqcsim::bindings","Type for a plugin state.",null,null],[4,"dqcs_handle_type_t","","Enumeration of types that can be associated with a handle.",null,null],[13,"DQCS_HTYPE_INVALID","","Indicates that the given handle is invalid.",59,null],[13,"DQCS_HTYPE_ARB_DATA","","Indicates that the given handle belongs to an `ArbData`…",59,null],[13,"DQCS_HTYPE_ARB_CMD","","Indicates that the given handle belongs to an `ArbCmd`…",59,null],[13,"DQCS_HTYPE_ARB_CMD_QUEUE","","Indicates that the given handle belongs to a queue of…",59,null],[13,"DQCS_HTYPE_QUBIT_SET","","Indicates that the given handle belongs to a set of qubit…",59,null],[13,"DQCS_HTYPE_GATE","","Indicates that the given handle belongs to a quantum gate…",59,null],[13,"DQCS_HTYPE_MEAS","","Indicates that the given handle belongs to a qubit…",59,null],[13,"DQCS_HTYPE_MEAS_SET","","Indicates that the given handle belongs to a set of qubit…",59,null],[13,"DQCS_HTYPE_MATRIX","","Indicates that the given handle belongs to a matrix. > >…",59,null],[13,"DQCS_HTYPE_GATE_MAP","","Indicates that the given handle belongs to a gate map. > >…",59,null],[13,"DQCS_HTYPE_FRONT_PROCESS_CONFIG","","Indicates that the given handle belongs to a frontend…",59,null],[13,"DQCS_HTYPE_OPER_PROCESS_CONFIG","","Indicates that the given handle belongs to an operator…",59,null],[13,"DQCS_HTYPE_BACK_PROCESS_CONFIG","","Indicates that the given handle belongs to a backend…",59,null],[13,"DQCS_HTYPE_FRONT_THREAD_CONFIG","","Indicates that the given handle belongs to a frontend…",59,null],[13,"DQCS_HTYPE_OPER_THREAD_CONFIG","","Indicates that the given handle belongs to an operator…",59,null],[13,"DQCS_HTYPE_BACK_THREAD_CONFIG","","Indicates that the given handle belongs to a backend…",59,null],[13,"DQCS_HTYPE_SIM_CONFIG","","Indicates that the given handle belongs to a simulator…",59,null],[13,"DQCS_HTYPE_SIM","","Indicates that the given handle belongs to a simulator…",59,null],[13,"DQCS_HTYPE_FRONT_DEF","","Indicates that the given handle belongs to a frontend…",59,null],[13,"DQCS_HTYPE_OPER_DEF","","Indicates that the given handle belongs to an operator…",59,null],[13,"DQCS_HTYPE_BACK_DEF","","Indicates that the given handle belongs to a backend…",59,null],[13,"DQCS_HTYPE_PLUGIN_JOIN","","Indicates that the given handle belongs to a plugin thread…",59,null],[4,"dqcs_plugin_type_t","","Enumeration of the three types of plugins.",null,null],[13,"DQCS_PTYPE_INVALID","","Invalid plugin type. Used to indicate failure of an API…",60,null],[13,"DQCS_PTYPE_FRONT","","Frontend plugin.",60,null],[13,"DQCS_PTYPE_OPER","","Operator plugin.",60,null],[13,"DQCS_PTYPE_BACK","","Backend plugin.",60,null],[4,"dqcs_loglevel_t","","Enumeration of loglevels and logging modes.",null,null],[13,"DQCS_LOG_INVALID","","Invalid loglevel. Used to indicate failure of an API that…",61,null],[13,"DQCS_LOG_OFF","","Turns logging off.",61,null],[13,"DQCS_LOG_FATAL","","This loglevel is to be used for reporting a fatal error,…",61,null],[13,"DQCS_LOG_ERROR","","This loglevel is to be used for reporting or propagating a…",61,null],[13,"DQCS_LOG_WARN","","This loglevel is to be used for reporting that a called…",61,null],[13,"DQCS_LOG_NOTE","","This loglevel is to be used for reporting information…",61,null],[13,"DQCS_LOG_INFO","","This loglevel is to be used for reporting information NOT…",61,null],[13,"DQCS_LOG_DEBUG","","This loglevel is to be used for reporting debugging…",61,null],[13,"DQCS_LOG_TRACE","","This loglevel is to be used for reporting debugging…",61,null],[13,"DQCS_LOG_PASS","","This is intended to be used when configuring the…",61,null],[4,"dqcs_return_t","","Default return type for functions that don't need to…",null,null],[13,"DQCS_FAILURE","","The function has failed. More information may be obtained…",62,null],[13,"DQCS_SUCCESS","","The function did what it was supposed to.",62,null],[4,"dqcs_bool_return_t","","Return type for functions that normally return a boolean…",null,null],[13,"DQCS_BOOL_FAILURE","","The function has failed. More information may be obtained…",63,null],[13,"DQCS_FALSE","","The function did what it was supposed to and returned false.",63,null],[13,"DQCS_TRUE","","The function did what it was supposed to and returned true.",63,null],[4,"dqcs_measurement_t","","Qubit measurement value.",null,null],[13,"DQCS_MEAS_INVALID","","Error value used to indicate that something went wrong.",64,null],[13,"DQCS_MEAS_ZERO","","Indicates that the qubit was measured to be zero.",64,null],[13,"DQCS_MEAS_ONE","","Indicates that the qubit was measured to be one.",64,null],[13,"DQCS_MEAS_UNDEFINED","","Indicates that the measurement value is unknown for…",64,null],[4,"dqcs_path_style_t","","Reproduction file path style.",null,null],[13,"DQCS_PATH_STYLE_INVALID","","Error value used to indicate that something went wrong.",65,null],[13,"DQCS_PATH_STYLE_KEEP","","Specifies that paths should be saved the same way they…",65,null],[13,"DQCS_PATH_STYLE_RELATIVE","","Specifies that all paths should be saved relative to…",65,null],[13,"DQCS_PATH_STYLE_ABSOLUTE","","Specifies that all paths should be saved canonically, i.e.…",65,null],[4,"dqcs_predefined_gate_t","","Enumeration of gates defined by DQCsim.",null,null],[13,"DQCS_GATE_INVALID","","Invalid gate. Used as an error return value.",66,null],[13,"DQCS_GATE_PAULI_I","","The identity gate for a single qubit.",66,null],[13,"DQCS_GATE_PAULI_X","","The Pauli X matrix.",66,null],[13,"DQCS_GATE_PAULI_Y","","The Pauli Y matrix.",66,null],[13,"DQCS_GATE_PAULI_Z","","The Pauli Z matrix.",66,null],[13,"DQCS_GATE_H","","The hadamard gate matrix. That is, a 180-degree Y…",66,null],[13,"DQCS_GATE_S","","The S matrix, also known as a 90 degree Z rotation.",66,null],[13,"DQCS_GATE_S_DAG","","The S-dagger matrix, also known as a negative 90 degree Z…",66,null],[13,"DQCS_GATE_T","","The T matrix, also known as a 45 degree Z rotation.",66,null],[13,"DQCS_GATE_T_DAG","","The T-dagger matrix, also known as a negative 45 degree Z…",66,null],[13,"DQCS_GATE_RX_90","","Rx(90°) gate.",66,null],[13,"DQCS_GATE_RX_M90","","Rx(-90°) gate.",66,null],[13,"DQCS_GATE_RX_180","","Rx(180°) gate.",66,null],[13,"DQCS_GATE_RY_90","","Ry(90°) gate.",66,null],[13,"DQCS_GATE_RY_M90","","Ry(-90°) gate.",66,null],[13,"DQCS_GATE_RY_180","","Ry(180°) gate.",66,null],[13,"DQCS_GATE_RZ_90","","Rz(90°) gate.",66,null],[13,"DQCS_GATE_RZ_M90","","Rz(-90°) gate.",66,null],[13,"DQCS_GATE_RZ_180","","Rz(180°) gate.",66,null],[13,"DQCS_GATE_RX","","The matrix for an arbitrary X rotation.",66,null],[13,"DQCS_GATE_RY","","The matrix for an arbitrary Y rotation.",66,null],[13,"DQCS_GATE_RZ","","The matrix for an arbitrary Z rotation.",66,null],[13,"DQCS_GATE_PHASE_K","","The matrix for a Z rotation with angle π/2^k.",66,null],[13,"DQCS_GATE_PHASE","","The matrix for an arbitrary Z rotation.",66,null],[13,"DQCS_GATE_U1","","Any single-qubit unitary gate, parameterized as a full…",66,null],[13,"DQCS_GATE_R","","Arbitrary rotation matrix.",66,null],[13,"DQCS_GATE_SWAP","","The swap gate matrix.",66,null],[13,"DQCS_GATE_SQRT_SWAP","","The square-root of a swap gate matrix.",66,null],[13,"DQCS_GATE_U2","","Any two-qubit unitary gate, parameterized as a full…",66,null],[13,"DQCS_GATE_U3","","Any three-qubit unitary gate, parameterized as a full…",66,null],[4,"dqcs_basis_t","","Enumeration of Pauli bases.",null,null],[13,"DQCS_BASIS_INVALID","","Invalid basis. Used as an error return value.",67,null],[13,"DQCS_BASIS_X","","The X basis.",67,null],[13,"DQCS_BASIS_Y","","The Y basis.",67,null],[13,"DQCS_BASIS_Z","","The Z basis.",67,null],[4,"dqcs_gate_type_t","","Types of DQCsim gates.",null,null],[13,"DQCS_GATE_TYPE_INVALID","","Invalid gate type. Used as an error return value.",68,null],[13,"DQCS_GATE_TYPE_UNITARY","","Unitary gates have one or more target qubits, zero or more…",68,null],[13,"DQCS_GATE_TYPE_MEASUREMENT","","Measurement gates have one or more measured qubits and a…",68,null],[13,"DQCS_GATE_TYPE_PREP","","Prep gates have one or more target qubits and a 2x2…",68,null],[13,"DQCS_GATE_TYPE_CUSTOM","","Custom gates perform a user-defined mixed…",68,null],[5,"dqcs_error_get","","Returns a pointer to the latest error message.",null,[[]]],[5,"dqcs_error_set","","Sets the latest error message string.",null,[[]]],[5,"dqcs_handle_type","","Returns the type of object associated with the given handle.",null,[[["dqcs_handle_t"]],["dqcs_handle_type_t"]]],[5,"dqcs_handle_dump","","Returns a debug dump of the object associated with the…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_handle_delete","","Destroys the object associated with a handle.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_handle_delete_all","","Deletes all handles for the current thread.",null,[[],["dqcs_return_t"]]],[5,"dqcs_handle_leak_check","","Succeeds only if there are no live handles in the current…",null,[[],["dqcs_return_t"]]],[5,"dqcs_arb_new","","Creates a new `ArbData` object.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_arb_json_set","","Sets the JSON/CBOR object of an `ArbData` object by means…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_json_get","","Returns the JSON/CBOR object of an `ArbData` object in the…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_arb_cbor_set","","Sets the JSON/CBOR object of an `ArbData` object by means…",null,[[["dqcs_handle_t"],["size_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_cbor_get","","Returns the JSON/CBOR object of an `ArbData` object in the…",null,[[["dqcs_handle_t"],["size_t"]],["ssize_t"]]],[5,"dqcs_arb_push_str","","Pushes an unstructured string argument to the back of the…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_push_raw","","Pushes an unstructured raw argument to the back of the list.",null,[[["dqcs_handle_t"],["size_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_pop_str","","Pops an unstructured string argument from the back of the…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_arb_pop_raw","","Pops an unstructured raw argument from the back of the list.",null,[[["dqcs_handle_t"],["size_t"]],["ssize_t"]]],[5,"dqcs_arb_pop","","Pops an unstructured argument from the back of the list…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_insert_str","","Inserts an unstructured string argument into the list at…",null,[[["ssize_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_insert_raw","","Inserts an unstructured raw argument into the list at the…",null,[[["size_t"],["ssize_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_remove","","Removes the specified unstructured string argument from…",null,[[["ssize_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_set_str","","Replaces the unstructured argument at the specified index…",null,[[["ssize_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_set_raw","","Replaces the unstructured argument at the specified index…",null,[[["size_t"],["ssize_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_get_str","","Returns the unstructured string argument at the specified…",null,[[["ssize_t"],["dqcs_handle_t"]]]],[5,"dqcs_arb_get_raw","","Returns the unstructured string argument at the specified…",null,[[["size_t"],["ssize_t"],["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_arb_get_size","","Returns the size in bytes of the unstructured string…",null,[[["ssize_t"],["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_arb_len","","Returns the number of unstructured arguments, or -1 to…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_arb_clear","","Clears the unstructured argument list.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_arb_assign","","Copies the data from one object to another.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_cmd_new","","Creates a new `ArbCmd` object.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_cmd_iface_get","","Returns the interface ID of an `ArbCmd`.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_cmd_iface_cmp","","Compares the interface ID of an `ArbCmd` with the given…",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_cmd_oper_get","","Returns the operation ID of an `ArbCmd`.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_cmd_oper_cmp","","Compares the operation ID of an `ArbCmd` with the given…",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_cq_new","","Creates a new `ArbCmd` queue object.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_cq_push","","Pushes an `ArbCmd` object into the given `ArbCmd` queue.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_cq_next","","Advances an `ArbCmd` queue to the next command.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_cq_len","","Returns the number of `ArbCmd` objects in the given…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_qbset_new","","Creates a new set of qubit references.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_qbset_contains","","Returns whether the given qubit set contains the given…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_qbset_push","","Pushes a qubit reference into a qubit reference set.",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_return_t"]]],[5,"dqcs_qbset_pop","","Pops a qubit reference off of a qubit reference set.",null,[[["dqcs_handle_t"]],["dqcs_qubit_t"]]],[5,"dqcs_qbset_len","","Returns the number of qubits in the given set.",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_qbset_copy","","Returns a copy of the given qubit set, intended for…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_mat_new","","Constructs a new gate matrix. > > `num_qubits` must be set…",null,[[["size_t"]],["dqcs_handle_t"]]],[5,"dqcs_mat_predef","","Constructs a new gate matrix for one of DQCsim's…",null,[[["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_handle_t"]]],[5,"dqcs_mat_basis","","Constructs a matrix with the eigenvectors of one of the…",null,[[["dqcs_basis_t"]],["dqcs_handle_t"]]],[5,"dqcs_mat_len","","Returns the number of complex entries in the given matrix.…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_mat_dimension","","Returns the dimension (number of rows == number of…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_mat_num_qubits","","Returns the number of qubits targeted by the given matrix.…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_mat_get","","Returns a copy of the contained matrix as a C array. > >…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_mat_approx_eq","","Approximately compares two matrices. > > `a` and `b` are…",null,[[["bool"],["dqcs_handle_t"],["c_double"]],["dqcs_bool_return_t"]]],[5,"dqcs_mat_basis_approx_eq","","Approximately compares two basis matrices. > > `a` and `b`…",null,[[["dqcs_handle_t"],["c_double"]],["dqcs_bool_return_t"]]],[5,"dqcs_mat_approx_unitary","","Returns whether the matrix is approximately unitary. > >…",null,[[["dqcs_handle_t"],["c_double"]],["dqcs_bool_return_t"]]],[5,"dqcs_mat_is_predef","","Returns whether this matrix is of the given predefined…",null,[[["bool"],["c_double"],["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_mat_add_controls","","Constructs a controlled matrix from the given matrix. > >…",null,[[["dqcs_handle_t"],["size_t"]],["dqcs_handle_t"]]],[5,"dqcs_mat_strip_control","","Splits a controlled matrix into its non-controlled…",null,[[["c_double"],["dqcs_handle_t"],["bool"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_predef","","Constructs a new predefined unitary gate.",null,[[["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_predef_one","","Constructs a new predefined unitary one-qubit gate.",null,[[["dqcs_qubit_t"],["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_predef_two","","Constructs a new predefined unitary two-qubit gate.",null,[[["dqcs_qubit_t"],["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_predef_three","","Constructs a new predefined unitary three-qubit gate.",null,[[["dqcs_qubit_t"],["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_unitary","","Constructs a new unitary gate.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_measurement","","Constructs a new measurement gate.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_prep","","Constructs a new prep gate.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_new_custom","","Constructs a new custom gate.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_type","","Returns the gate type of the given gate.",null,[[["dqcs_handle_t"]],["dqcs_gate_type_t"]]],[5,"dqcs_gate_has_name","","Returns whether the specified gate has a name.",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gate_name","","Returns the name of a custom gate.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_gate_has_targets","","Returns whether the specified gate has target qubits.",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gate_targets","","Returns a handle to a new qubit reference set containing…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_has_controls","","Returns whether the specified gate has control qubits.",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gate_controls","","Returns a handle to a new qubit reference set containing…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_has_measures","","Returns whether the specified gate measures any qubits.",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gate_measures","","Returns a handle to a new qubit reference set containing…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_has_matrix","","Returns whether a unitary matrix is associated with this…",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gate_matrix","","Returns a copy of the unitary matrix associated with this…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gate_reduce_control","","Utility function that detects control qubits in the…",null,[[["bool"],["dqcs_handle_t"],["c_double"]],["dqcs_handle_t"]]],[5,"dqcs_gate_expand_control","","Utility function that expands a gate matrix to account for…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gm_new","","Constructs a new gate map. > > Returns a handle to a gate…",null,[[["option"],["option"],["bool"]],["dqcs_handle_t"]]],[5,"dqcs_gm_add_predef_unitary","","Adds a unitary gate mapping for the given DQCsim-defined…",null,[[["option"],["isize"],["c_double"],["bool"],["dqcs_handle_t"],["dqcs_predefined_gate_t"]],["dqcs_return_t"]]],[5,"dqcs_gm_add_fixed_unitary","","Adds a unitary gate mapping for the given gate matrix to…",null,[[["bool"],["isize"],["dqcs_handle_t"],["option"],["c_double"]],["dqcs_return_t"]]],[5,"dqcs_gm_add_custom_unitary","","Adds a custom unitary gate mapping to the given gate map.…",null,[[["option"],["option"],["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_gm_add_measure","","Adds a measurement gate mapping to the given gate map. > >…",null,[[["option"],["isize"],["dqcs_handle_t"],["f64"]],["dqcs_return_t"]]],[5,"dqcs_gm_add_prep","","Adds a prep gate mapping to the given gate map. > > `gm`…",null,[[["option"],["isize"],["dqcs_handle_t"],["f64"]],["dqcs_return_t"]]],[5,"dqcs_gm_add_custom","","Adds a fully customizable gate mapping to the given gate…",null,[[["option"],["option"],["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_gm_detect","","Uses a gate map object to convert an incoming DQCsim gate…",null,[[["dqcs_handle_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_gm_construct","","Uses a gate map object to construct a multi-qubit DQCsim…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gm_construct_one","","Uses a gate map object to construct a one-qubit DQCsim…",null,[[["dqcs_qubit_t"],["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gm_construct_two","","Uses a gate map object to construct a two-qubit DQCsim…",null,[[["dqcs_qubit_t"],["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_gm_construct_three","","Uses a gate map object to construct a three-qubit DQCsim…",null,[[["dqcs_qubit_t"],["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_meas_new","","Constructs a new measurement object.",null,[[["dqcs_qubit_t"],["dqcs_measurement_t"]],["dqcs_handle_t"]]],[5,"dqcs_meas_qubit_get","","Returns the qubit reference associated with a measurement…",null,[[["dqcs_handle_t"]],["dqcs_qubit_t"]]],[5,"dqcs_meas_qubit_set","","Sets the qubit reference associated with a measurement…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_return_t"]]],[5,"dqcs_meas_value_get","","Returns the measurement value associated with a…",null,[[["dqcs_handle_t"]],["dqcs_measurement_t"]]],[5,"dqcs_meas_value_set","","Sets the measurement value associated with a measurement…",null,[[["dqcs_handle_t"],["dqcs_measurement_t"]],["dqcs_return_t"]]],[5,"dqcs_mset_new","","Creates a new set of qubit measurement results.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_mset_len","","Returns the number of qubits measurements in the given…",null,[[["dqcs_handle_t"]],["ssize_t"]]],[5,"dqcs_mset_contains","","Returns whether the given qubit measurement set contains…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_bool_return_t"]]],[5,"dqcs_mset_set","","Adds a measurement result to a measurement result set.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_mset_get","","Returns a copy of the measurement result for the given…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_handle_t"]]],[5,"dqcs_mset_take","","Returns the measurement result for the given qubit from a…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_handle_t"]]],[5,"dqcs_mset_remove","","Removes the measurement result for the given qubit from a…",null,[[["dqcs_handle_t"],["dqcs_qubit_t"]],["dqcs_return_t"]]],[5,"dqcs_mset_take_any","","Returns the measurement result for any of the qubits…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_log_raw","","Primitive API for sending a log message using the current…",null,[[["u32"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_new","","Creates a new plugin process configuration object using…",null,[[["dqcs_plugin_type_t"]],["dqcs_handle_t"]]],[5,"dqcs_pcfg_new_raw","","Creates a new plugin process configuration object using…",null,[[["dqcs_plugin_type_t"]],["dqcs_handle_t"]]],[5,"dqcs_pcfg_type","","Returns the type of the given plugin process configuration.",null,[[["dqcs_handle_t"]],["dqcs_plugin_type_t"]]],[5,"dqcs_pcfg_name","","Returns the configured name for the given plugin process.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pcfg_executable","","Returns the configured executable path for the given…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pcfg_script","","Returns the configured script path for the given plugin…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pcfg_init_cmd","","Appends an `ArbCmd` to the list of initialization commands…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_env_set","","Overrides an environment variable for the plugin process.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_env_unset","","Removes/unsets an environment variable for the plugin…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_work_set","","Overrides the working directory for the plugin process.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_work_get","","Returns the configured working directory for the given…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pcfg_verbosity_set","","Configures the logging verbosity for the given plugin…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_verbosity_get","","Returns the configured verbosity for the given plugin…",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_pcfg_tee","","Configures a plugin process to also output its log…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_stdout_mode_set","","Configures the capture mode for the stdout stream of the…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_stdout_mode_get","","Returns the configured stdout capture mode for the…",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_pcfg_stderr_mode_set","","Configures the capture mode for the stderr stream of the…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_stderr_mode_get","","Returns the configured stderr capture mode for the…",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_pcfg_accept_timeout_set","","Configures the timeout for the plugin process to connect…",null,[[["dqcs_handle_t"],["f64"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_accept_timeout_get","","Returns the configured timeout for the plugin process to…",null,[[["dqcs_handle_t"]],["f64"]]],[5,"dqcs_pcfg_shutdown_timeout_set","","Configures the timeout for the plugin process to shut down…",null,[[["dqcs_handle_t"],["f64"]],["dqcs_return_t"]]],[5,"dqcs_pcfg_shutdown_timeout_get","","Returns the configured timeout for the plugin process to…",null,[[["dqcs_handle_t"]],["f64"]]],[5,"dqcs_tcfg_new","","Creates a new plugin thread configuration object from a…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_tcfg_new_raw","","Creates a new plugin thread configuration object from a…",null,[[["dqcs_plugin_type_t"],["option"],["option"]],["dqcs_handle_t"]]],[5,"dqcs_tcfg_type","","Returns the type of the given plugin thread configuration.",null,[[["dqcs_handle_t"]],["dqcs_plugin_type_t"]]],[5,"dqcs_tcfg_name","","Returns the configured name for the given plugin thread.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_tcfg_init_cmd","","Appends an `ArbCmd` to the list of initialization commands…",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_tcfg_verbosity_set","","Configures the logging verbosity for the given plugin…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_tcfg_verbosity_get","","Returns the configured verbosity for the given plugin…",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_tcfg_tee","","Configures a plugin thread to also output its log messages…",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_new","","Constructs an empty simulation configuration.",null,[[],["dqcs_handle_t"]]],[5,"dqcs_scfg_push_plugin","","Appends a plugin to a simulation configuration.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_seed_set","","Configures the random seed that the simulation should use.",null,[[["dqcs_handle_t"],["u64"]],["dqcs_return_t"]]],[5,"dqcs_scfg_seed_get","","Returns the configured random seed.",null,[[["dqcs_handle_t"]],["u64"]]],[5,"dqcs_scfg_stderr_verbosity_set","","Configures the stderr sink verbosity for a simulation.",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_stderr_verbosity_get","","Returns the configured stderr sink verbosity for a…",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_scfg_tee","","Configures DQCsim to also output its log messages to a file.",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_log_callback","","Configures DQCsim to also output its log messages to…",null,[[["option"],["dqcs_loglevel_t"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_dqcsim_verbosity_set","","Configures the logging verbosity for DQCsim's own messages.",null,[[["dqcs_handle_t"],["dqcs_loglevel_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_dqcsim_verbosity_get","","Returns the configured verbosity for DQCsim's own messages.",null,[[["dqcs_handle_t"]],["dqcs_loglevel_t"]]],[5,"dqcs_scfg_repro_path_style_set","","Sets the path style used when writing reproduction files.",null,[[["dqcs_path_style_t"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_scfg_repro_path_style_get","","Returns the path style used when writing reproduction files.",null,[[["dqcs_handle_t"]],["dqcs_path_style_t"]]],[5,"dqcs_scfg_repro_disable","","Disables the reproduction logging system.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_sim_new","","Constructs a DQCsim simulation.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_sim_start","","Starts a program on the simulated accelerator.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_sim_wait","","Waits for the simulated accelerator to finish its current…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_sim_send","","Sends a message to the simulated accelerator.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_sim_recv","","Waits for the simulated accelerator to send a message to us.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_sim_yield","","Yields to the simulator.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_sim_arb","","Sends an `ArbCmd` message to one of the plugins,…",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_sim_arb_idx","","Sends an `ArbCmd` message to one of the plugins,…",null,[[["ssize_t"],["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_sim_get_name","","Queries the implementation name of a plugin, referenced by…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_sim_get_name_idx","","Queries the implementation name of a plugin, referenced by…",null,[[["ssize_t"],["dqcs_handle_t"]]]],[5,"dqcs_sim_get_author","","Queries the author of a plugin, referenced by instance name.",null,[[["dqcs_handle_t"]]]],[5,"dqcs_sim_get_author_idx","","Queries the author of a plugin, referenced by index.",null,[[["ssize_t"],["dqcs_handle_t"]]]],[5,"dqcs_sim_get_version","","Queries the version of a plugin, referenced by instance…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_sim_get_version_idx","","Queries the version of a plugin, referenced by index.",null,[[["ssize_t"],["dqcs_handle_t"]]]],[5,"dqcs_sim_write_reproduction_file","","Writes a reproduction file for the simulation so far.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_new","","Creates a new `PluginDefinition` object.",null,[[["dqcs_plugin_type_t"]],["dqcs_handle_t"]]],[5,"dqcs_pdef_type","","Returns the plugin type for the given plugin definition…",null,[[["dqcs_handle_t"]],["dqcs_plugin_type_t"]]],[5,"dqcs_pdef_name","","Returns the plugin name for the given plugin definition…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pdef_author","","Returns the plugin author for the given plugin definition…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pdef_version","","Returns the plugin version for the given plugin definition…",null,[[["dqcs_handle_t"]]]],[5,"dqcs_pdef_set_initialize_cb","","Sets the user logic initialization callback.",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_drop_cb","","Sets the user logic drop/cleanup callback.",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_run_cb","","Sets the run callback for frontends.",null,[[["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_allocate_cb","","Sets the qubit allocation callback for operators and…",null,[[["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_free_cb","","Sets the qubit deallocation callback for operators and…",null,[[["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_gate_cb","","Sets the gate execution callback for operators and backends.",null,[[["option"],["dqcs_handle_t"],["option"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_modify_measurement_cb","","Sets the measurement modification callback for operators.",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_advance_cb","","Sets the callback for advancing time for operators and…",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_upstream_arb_cb","","Sets the callback function for handling an arb from…",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_pdef_set_host_arb_cb","","Sets the callback function function for handling an arb…",null,[[["option"],["option"],["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_run","","Executes a plugin in the current thread.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_start","","Executes a plugin in a worker thread.",null,[[["dqcs_handle_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_wait","","Waits for a plugin worker thread to finish executing.",null,[[["dqcs_handle_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_send","","Sends a message to the host.",null,[[["dqcs_handle_t"],["dqcs_plugin_state_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_recv","","Waits for a message from the host.",null,[[["dqcs_plugin_state_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_allocate","","Allocate the given number of downstream qubits.",null,[[["dqcs_handle_t"],["usize"],["dqcs_plugin_state_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_free","","Free the given downstream qubits.",null,[[["dqcs_handle_t"],["dqcs_plugin_state_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_gate","","Tells the downstream plugin to execute a gate.",null,[[["dqcs_handle_t"],["dqcs_plugin_state_t"]],["dqcs_return_t"]]],[5,"dqcs_plugin_get_measurement","","Returns the latest measurement of the given downstream…",null,[[["dqcs_qubit_t"],["dqcs_plugin_state_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_get_cycles_since_measure","","Returns the number of downstream cycles since the latest…",null,[[["dqcs_qubit_t"],["dqcs_plugin_state_t"]],["dqcs_cycle_t"]]],[5,"dqcs_plugin_get_cycles_between_measures","","Returns the number of downstream cycles between the last…",null,[[["dqcs_qubit_t"],["dqcs_plugin_state_t"]],["dqcs_cycle_t"]]],[5,"dqcs_plugin_advance","","Tells the downstream plugin to run for the specified…",null,[[["dqcs_cycle_t"],["dqcs_plugin_state_t"]],["dqcs_cycle_t"]]],[5,"dqcs_plugin_get_cycle","","Returns the current value of the downstream cycle counter.",null,[[["dqcs_plugin_state_t"]],["dqcs_cycle_t"]]],[5,"dqcs_plugin_arb","","Sends an arbitrary command downstream.",null,[[["dqcs_handle_t"],["dqcs_plugin_state_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_random_u64","","Generates a random unsigned 64-bit number using the…",null,[[["dqcs_plugin_state_t"]],["dqcs_handle_t"]]],[5,"dqcs_plugin_random_f64","","Generates a random floating point number using the…",null,[[["dqcs_plugin_state_t"]],["c_double"]]],[11,"resolve","","",69,[[],[["pluginstate"],["result",["pluginstate"]]]]],[11,"into_capture_mode","","",61,[[],[["result",["streamcapturemode"]],["streamcapturemode"]]]],[11,"into_loglevel","","",61,[[],[["loglevel"],["result",["loglevel"]]]]],[11,"into_loglevel_filter","","",61,[[],[["result",["loglevelfilter"]],["loglevelfilter"]]]],[6,"dqcs_handle_t","","Type for a handle.",null,null],[6,"dqcs_qubit_t","","Type for a qubit reference.",null,null],[6,"dqcs_cycle_t","","Type for a simulation cycle timestamp.",null,null],[14,"log","dqcsim","",null,null],[14,"fatal","","",null,null],[14,"error","","",null,null],[14,"warn","","",null,null],[14,"note","","",null,null],[14,"info","","",null,null],[14,"debug","","",null,null],[14,"trace","","",null,null],[14,"checked_rpc","","",null,null],[11,"from","dqcsim::common::converter","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"vzip","","",70,[[],["v"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"vzip","","",71,[[],["v"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"vzip","","",72,[[],["v"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"vzip","","",73,[[],["v"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"vzip","","",75,[[],["v"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"vzip","","",76,[[],["v"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"vzip","","",78,[[],["v"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"from","","",79,[[],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"vzip","","",79,[[],["v"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"vzip","","",80,[[],["v"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"vzip","","",82,[[],["v"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"vzip","","",83,[[],["v"]]],[11,"from","dqcsim::common::error","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_string","","",84,[[["self"]],["string"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"vzip","","",84,[[],["v"]]],[11,"as_fail","","",84,[[["self"]],["fail"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"as_fail","","",9,[[["self"]],["fail"]]],[11,"from","dqcsim::common::gates","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","dqcsim::common::log","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"into_iter","","",85,[[],["i"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"vzip","","",85,[[],["v"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"into_iter","","",86,[[],["i"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"vzip","","",86,[[],["v"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"vzip","","",87,[[],["v"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"to_string","","",88,[[["self"]],["string"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"vzip","","",88,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","dqcsim::common::log::callback","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","dqcsim::common::log::proxy","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"vzip","","",89,[[],["v"]]],[11,"from","dqcsim::common::log::tee_file","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"as_fail","","",18,[[["self"]],["fail"]]],[11,"from","dqcsim::common::log::thread","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"vzip","","",90,[[],["v"]]],[11,"from","dqcsim::common::protocol","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"vzip","","",91,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"vzip","","",26,[[],["v"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"vzip","","",28,[[],["v"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"vzip","","",29,[[],["v"]]],[11,"from","dqcsim::common::types","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"to_string","","",92,[[["self"]],["string"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"vzip","","",92,[[],["v"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"vzip","","",93,[[],["v"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"to_string","","",94,[[["self"]],["string"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"vzip","","",94,[[],["v"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"to_string","","",95,[[["self"]],["string"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"vzip","","",95,[[],["v"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"vzip","","",96,[[],["v"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"to_string","","",97,[[["self"]],["string"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"vzip","","",97,[[],["v"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"to_string","","",98,[[["self"]],["string"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"vzip","","",98,[[],["v"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"vzip","","",30,[[],["v"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"to_string","","",99,[[["self"]],["string"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"vzip","","",99,[[],["v"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"into_iter","","",100,[[],["i"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"vzip","","",100,[[],["v"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","dqcsim::host::configuration","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"to_string","","",45,[[["self"]],["string"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"to_string","","",47,[[["self"]],["string"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"vzip","","",48,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","dqcsim::host::plugin::process","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"vzip","","",101,[[],["v"]]],[11,"from","dqcsim::host::plugin::thread","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"vzip","","",102,[[],["v"]]],[11,"from","dqcsim::host::reproduction","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"to_string","","",54,[[["self"]],["string"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"from","dqcsim::host::simulation","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"vzip","","",103,[[],["v"]]],[11,"from","dqcsim::host::simulator","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"from","dqcsim::plugin::connection","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"vzip","","",104,[[],["v"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"vzip","","",57,[[],["v"]]],[11,"from","dqcsim::plugin::definition","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"vzip","","",58,[[],["v"]]],[11,"from","dqcsim::plugin::state","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"vzip","","",105,[[],["v"]]],[11,"from","dqcsim::bindings","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"vzip","","",69,[[],["v"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"vzip","","",59,[[],["v"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"vzip","","",60,[[],["v"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"vzip","","",61,[[],["v"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"vzip","","",62,[[],["v"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"vzip","","",63,[[],["v"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"vzip","","",64,[[],["v"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"vzip","","",65,[[],["v"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"vzip","","",66,[[],["v"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"vzip","","",67,[[],["v"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"vzip","","",68,[[],["v"]]],[11,"from_arb","dqcsim::common::types","",100,[[["arbdata"]],["result"]]],[11,"to_arb","","",100,[[["arbdata"]]]],[11,"detect","dqcsim::common::converter","",78,[[["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",78,[[["self"]],["result"]]],[11,"detect","","",79,[[["gate"],["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",79,[[["self"]],[["gate"],["result",["gate"]]]]],[11,"detect","","",80,[[["gate"],["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",80,[[["self"]],[["gate"],["result",["gate"]]]]],[11,"detect","","",81,[[["gate"],["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",81,[[["self"]],[["gate"],["result",["gate"]]]]],[11,"detect","","",82,[[["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",82,[[["self"]],["result"]]],[11,"detect","","",83,[[["i"],["self"]],[["option"],["result",["option"]]]]],[11,"construct","","",83,[[["self"]],["result"]]],[11,"detect_matrix","","",70,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",70,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",71,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",71,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",72,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",72,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",73,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",73,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",74,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",74,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",75,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",75,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",76,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",76,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"detect_matrix","","",77,[[["bool"],["f64"],["self"],["matrix"]],[["result",["option"]],["option"]]]],[11,"construct_matrix","","",77,[[["self"]],[["matrix"],["result",["matrix"]]]]],[11,"name","dqcsim::common::log::callback","",15,[[["self"]],["str"]]],[11,"enabled","","",15,[[["self"],["loglevel"]],["bool"]]],[11,"log","","",15,[[["logrecord"],["self"]]]],[11,"name","dqcsim::common::log::proxy","",89,[[["self"]],["str"]]],[11,"enabled","","",89,[[["self"],["loglevel"]],["bool"]]],[11,"log","","",89,[[["logrecord"],["self"]]]],[11,"name","dqcsim::common::log::tee_file","",17,[[["self"]],["str"]]],[11,"enabled","","",17,[[["self"],["loglevel"]],["bool"]]],[11,"log","","",17,[[["logrecord"],["self"]]]],[11,"start","dqcsim::host::simulation","Starts a program on the accelerator.",103,[[["self"]],["result"]]],[11,"wait","","Waits for the accelerator to finish its current program.",103,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"send","","Sends a message to the accelerator.",103,[[["self"]],["result"]]],[11,"recv","","Waits for the accelerator to send a message to us.",103,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"instantiate","dqcsim::host::configuration","",39,[[["box"]],[["box",["plugin"]],["plugin"]]]],[11,"get_log_configuration","","",39,[[["self"]],["pluginlogconfiguration"]]],[11,"get_type","","",39,[[["self"]],["plugintype"]]],[11,"get_reproduction","","",39,[[["self"],["reproductionpathstyle"]],[["result",["pluginreproduction"]],["pluginreproduction"]]]],[11,"limit_verbosity","","",39,[[["self"],["loglevelfilter"]]]],[11,"set_default_name","","",39,[[["self"],["string"]]]],[11,"instantiate","","",43,[[["box"]],[["box",["plugin"]],["plugin"]]]],[11,"get_log_configuration","","",43,[[["self"]],["pluginlogconfiguration"]]],[11,"get_type","","",43,[[["self"]],["plugintype"]]],[11,"get_reproduction","","",43,[[["self"],["reproductionpathstyle"]],[["result",["pluginreproduction"]],["pluginreproduction"]]]],[11,"limit_verbosity","","",43,[[["self"],["loglevelfilter"]]]],[11,"set_default_name","","",43,[[["self"],["string"]]]],[11,"spawn","dqcsim::host::plugin::process","Spawn the child process based on the plugin configuration.…",101,[[["self"],["logthread"]],["result"]]],[11,"plugin_type","","",101,[[["self"]],["plugintype"]]],[11,"init_cmds","","",101,[[["self"]],[["vec",["arbcmd"]],["arbcmd"]]]],[11,"log_configuration","","",101,[[["self"]],["pluginlogconfiguration"]]],[11,"rpc","","",101,[[["self"],["simulatortoplugin"]],[["result",["plugintosimulator"]],["plugintosimulator"]]]],[11,"spawn","dqcsim::host::plugin::thread","",102,[[["self"],["logthread"]],["result"]]],[11,"rpc","","",102,[[["self"],["simulatortoplugin"]],[["result",["plugintosimulator"]],["plugintosimulator"]]]],[11,"plugin_type","","",102,[[["self"]],["plugintype"]]],[11,"init_cmds","","",102,[[["self"]],[["vec",["arbcmd"]],["arbcmd"]]]],[11,"log_configuration","","",102,[[["self"]],["pluginlogconfiguration"]]],[11,"drop","dqcsim::common::log::thread","",90,[[["self"]]]],[11,"drop","dqcsim::host::plugin::process","",101,[[["self"]]]],[11,"drop","dqcsim::host::plugin::thread","",102,[[["self"]]]],[11,"drop","dqcsim::host::simulation","",103,[[["self"]]]],[11,"drop","dqcsim::host::simulator","",55,[[["self"]]]],[11,"drop","dqcsim::plugin::connection","",104,[[["self"]]]],[11,"from","dqcsim::common::converter","",70,[[["matrix"]],["fixedmatrixconverter"]]],[11,"from","","",79,[[["m"]],["self"]]],[11,"from","dqcsim::common::error","",84,[[["errorkind"]],["error"]]],[11,"from","","",84,[[["context",["string"]],["string"]],["error"]]],[11,"from","","",84,[[["context",["errorkind"]],["errorkind"]],["error"]]],[11,"from","","",84,[[["error"]],["error"]]],[11,"from","","",84,[[["error"]],["error"]]],[11,"from","","",84,[[["senderror"]],["error"]]],[11,"from","","",84,[[["error"]],["error"]]],[11,"from","","",84,[[["parseerror"]],["error"]]],[11,"from","","",84,[[["error"]],["error"]]],[11,"from","","",84,[[["error"]],["error"]]],[11,"from","","",84,[[["utf8error"]],["error"]]],[11,"from","","",84,[[["fromutf8error"]],["error"]]],[11,"from","","",84,[[["parsefloaterror"]],["error"]]],[11,"from","","",84,[[["nulerror"]],["error"]]],[11,"from","","",84,[[["recverror"]],["error"]]],[11,"from","dqcsim::common::gates","",11,[[["boundunitarygate"]],["unboundunitarygate"]]],[11,"from","","",10,[[["boundunitarygate"]],["unitarygatetype"]]],[11,"from","dqcsim::common::types","",100,[[["boundunitarygate"]],["matrix"]]],[11,"from","","",30,[[["boundunitarygate"]],["gate"]]],[11,"from","dqcsim::common::gates","",10,[[["unboundunitarygate"]],["unitarygatetype"]]],[11,"from","dqcsim::common::types","",100,[[["unboundunitarygate"]],["matrix"]]],[11,"from","dqcsim::common::log","",14,[[["loglevel"]],["loglevelfilter"]]],[11,"from","dqcsim::common::types","",33,[[["option",["bool"]],["bool"]],["qubitmeasurementvalue"]]],[11,"from","","",33,[[["bool"]],["qubitmeasurementvalue"]]],[11,"from","","",100,[[["basis"]],["matrix"]]],[11,"from","dqcsim::host::configuration","Turns a string into a seed. The string is parsed as a u64…",37,[[["str"]],["self"]]],[11,"from","","",38,[[["pluginprocessconfiguration"]],["pluginlogconfiguration"]]],[11,"from","dqcsim::bindings","Convert a plugin state reference to its FFI representation.",69,[[["pluginstate"]],["dqcs_plugin_state_t"]]],[11,"from","","",60,[[["plugintype"]],["self"]]],[11,"from","","",61,[[["streamcapturemode"]],["self"]]],[11,"from","","",61,[[["loglevel"]],["self"]]],[11,"from","","",61,[[["loglevelfilter"]],["self"]]],[11,"from","","",63,[[["bool"]],["self"]]],[11,"from","","",64,[[["qubitmeasurementvalue"]],["dqcs_measurement_t"]]],[11,"from","","",65,[[["reproductionpathstyle"]],["dqcs_path_style_t"]]],[11,"from","","",68,[[["gatetype"]],["dqcs_gate_type_t"]]],[11,"into","dqcsim::common::log","",13,[[],["color"]]],[11,"into","dqcsim::common::types","",98,[[],["simulatortoplugin"]]],[11,"into","dqcsim::common::protocol","",21,[[],["simulatortoplugin"]]],[11,"into","","",91,[[],["simulatortoplugin"]]],[11,"into","","",22,[[],["simulatortoplugin"]]],[11,"into","","",20,[[],["simulatortoplugin"]]],[11,"into","dqcsim::common::types","",94,[[],["u64"]]],[11,"into","","",94,[[],["i64"]]],[11,"into","","",95,[[],["string"]]],[11,"into","","",98,[[],["arbdata"]]],[11,"into","","",33,[[],[["option",["bool"]],["bool"]]]],[11,"into","dqcsim::host::configuration","",46,[[],["stdio"]]],[11,"into","","Returns the embedded seed.",37,[[],["u64"]]],[11,"into","","",39,[[],[["pluginconfiguration"],["box",["pluginconfiguration"]]]]],[11,"into","","",43,[[],[["pluginconfiguration"],["box",["pluginconfiguration"]]]]],[11,"into","dqcsim::bindings","Convert the FFI representation of a plugin state back to a…",69,[[],["pluginstate"]]],[11,"into","","",60,[[],[["result",["plugintype"]],["plugintype"]]]],[11,"into","","",61,[[],[["result",["streamcapturemode"]],["streamcapturemode"]]]],[11,"into","","",64,[[],[["option",["qubitmeasurementvalue"]],["qubitmeasurementvalue"]]]],[11,"into","","",65,[[],[["option",["reproductionpathstyle"]],["reproductionpathstyle"]]]],[11,"next_back","dqcsim::common::log","",85,[[["self"]],["option"]]],[11,"nth_back","","",85,[[["self"],["usize"]],["option"]]],[11,"next_back","","",86,[[["self"]],["option"]]],[11,"nth_back","","",86,[[["self"],["usize"]],["option"]]],[11,"len","","",85,[[["self"]],["usize"]]],[11,"len","","",86,[[["self"]],["usize"]]],[11,"into_iter","dqcsim::common::types","",100,[[]]],[11,"next","dqcsim::common::log","",85,[[["self"]],["option"]]],[11,"size_hint","","",85,[[["self"]]]],[11,"nth","","",85,[[["self"],["usize"]],["option"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,[[["self"]]]],[11,"nth","","",86,[[["self"],["usize"]],["option"]]],[11,"clone","dqcsim::common::gates","",10,[[["self"]],["unitarygatetype"]]],[11,"clone","","",11,[[["self"]],["unboundunitarygate"]]],[11,"clone","","",12,[[["self"]],["boundunitarygate"]]],[11,"clone","dqcsim::common::log::tee_file","",16,[[["self"]],["teefileconfiguration"]]],[11,"clone","dqcsim::common::log","",13,[[["self"]],["loglevel"]]],[11,"clone","","",85,[[["self"]],["logleveliter"]]],[11,"clone","","",14,[[["self"]],["loglevelfilter"]]],[11,"clone","","",86,[[["self"]],["loglevelfilteriter"]]],[11,"clone","","",87,[[["self"]],["metadata"]]],[11,"clone","","",88,[[["self"]],["logrecord"]]],[11,"clone","dqcsim::common::types","",92,[[["self"]],["sequencenumber"]]],[11,"clone","","",94,[[["self"]],["cycle"]]],[11,"clone","","",95,[[["self"]],["qubitref"]]],[11,"clone","","",97,[[["self"]],["arbdata"]]],[11,"clone","","",98,[[["self"]],["arbcmd"]]],[11,"clone","","",32,[[["self"]],["gatetype"]]],[11,"clone","","",30,[[["self"]],["gate"]]],[11,"clone","","",33,[[["self"]],["qubitmeasurementvalue"]]],[11,"clone","","",31,[[["self"]],["qubitmeasurementresult"]]],[11,"clone","","",34,[[["self"]],["plugintype"]]],[11,"clone","","",99,[[["self"]],["pluginmetadata"]]],[11,"clone","","",100,[[["self"]],["matrix"]]],[11,"clone","","",35,[[["self"]],["basis"]]],[11,"clone","dqcsim::host::configuration","",45,[[["self"]],["envmod"]]],[11,"clone","","",46,[[["self"]],["streamcapturemode"]]],[11,"clone","","",37,[[["self"]],["seed"]]],[11,"clone","","",47,[[["self"]],["timeout"]]],[11,"clone","","",38,[[["self"]],["pluginlogconfiguration"]]],[11,"clone","","",42,[[["self"]],["pluginprocessspecification"]]],[11,"clone","","",40,[[["self"]],["pluginprocessfunctionalconfiguration"]]],[11,"clone","","",41,[[["self"]],["pluginprocessnonfunctionalconfiguration"]]],[11,"clone","","",39,[[["self"]],["pluginprocessconfiguration"]]],[11,"clone","","",48,[[["self"]],["reproductionpathstyle"]]],[11,"clone","dqcsim::host::reproduction","",54,[[["self"]],["hostcall"]]],[11,"clone","","",51,[[["self"]],["pluginreproduction"]]],[11,"clone","","",53,[[["self"]],["reproduction"]]],[11,"clone","dqcsim::bindings","",69,[[["self"]],["dqcs_plugin_state_t"]]],[11,"clone","","",59,[[["self"]],["dqcs_handle_type_t"]]],[11,"clone","","",60,[[["self"]],["dqcs_plugin_type_t"]]],[11,"clone","","",61,[[["self"]],["dqcs_loglevel_t"]]],[11,"clone","","",62,[[["self"]],["dqcs_return_t"]]],[11,"clone","","",63,[[["self"]],["dqcs_bool_return_t"]]],[11,"clone","","",64,[[["self"]],["dqcs_measurement_t"]]],[11,"clone","","",65,[[["self"]],["dqcs_path_style_t"]]],[11,"clone","","",66,[[["self"]],["dqcs_predefined_gate_t"]]],[11,"clone","","",67,[[["self"]],["dqcs_basis_t"]]],[11,"clone","","",68,[[["self"]],["dqcs_gate_type_t"]]],[11,"default","dqcsim::common::converter","",71,[[],["rxmatrixconverter"]]],[11,"default","","",72,[[],["rymatrixconverter"]]],[11,"default","","",73,[[],["rzmatrixconverter"]]],[11,"default","","",74,[[],["phasematrixconverter"]]],[11,"default","","",75,[[],["phasekmatrixconverter"]]],[11,"default","","",76,[[],["rmatrixconverter"]]],[11,"default","","",83,[[],["self"]]],[11,"default","dqcsim::common::types","",93,[[],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"default","","Constructs an ArbData with JSON object {} and zero…",97,[[],["self"]]],[11,"default","dqcsim::host::configuration","Returns a randomly generated seed using the random crate.",37,[[],["self"]]],[11,"default","","",40,[[],["pluginprocessfunctionalconfiguration"]]],[11,"default","","",41,[[],["pluginprocessnonfunctionalconfiguration"]]],[11,"default","","Generates a default configuration.",44,[[],["simulatorconfiguration"]]],[11,"eq","dqcsim::common::error","",9,[[["errorkind"],["self"]],["bool"]]],[11,"ne","","",9,[[["errorkind"],["self"]],["bool"]]],[11,"eq","dqcsim::common::gates","",10,[[["self"],["unitarygatetype"]],["bool"]]],[11,"ne","","",10,[[["self"],["unitarygatetype"]],["bool"]]],[11,"eq","","",11,[[["self"],["unboundunitarygate"]],["bool"]]],[11,"ne","","",11,[[["self"],["unboundunitarygate"]],["bool"]]],[11,"eq","","",12,[[["boundunitarygate"],["self"]],["bool"]]],[11,"ne","","",12,[[["boundunitarygate"],["self"]],["bool"]]],[11,"eq","dqcsim::common::log::tee_file","",18,[[["self"],["teefileerror"]],["bool"]]],[11,"ne","","",18,[[["self"],["teefileerror"]],["bool"]]],[11,"eq","","",16,[[["teefileconfiguration"],["self"]],["bool"]]],[11,"ne","","",16,[[["teefileconfiguration"],["self"]],["bool"]]],[11,"eq","dqcsim::common::log","",13,[[["self"],["loglevel"]],["bool"]]],[11,"eq","","",14,[[["self"],["loglevelfilter"]],["bool"]]],[11,"eq","dqcsim::common::protocol","",25,[[["simulatortoplugin"],["self"]],["bool"]]],[11,"ne","","",25,[[["simulatortoplugin"],["self"]],["bool"]]],[11,"eq","","",21,[[["plugininitializerequest"],["self"]],["bool"]]],[11,"eq","","",22,[[["pluginuserinitializerequest"],["self"]],["bool"]]],[11,"ne","","",22,[[["pluginuserinitializerequest"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["frontendrunrequest"]],["bool"]]],[11,"ne","","",20,[[["self"],["frontendrunrequest"]],["bool"]]],[11,"eq","","",26,[[["plugintosimulator"],["self"]],["bool"]]],[11,"ne","","",26,[[["plugintosimulator"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["plugininitializeresponse"]],["bool"]]],[11,"ne","","",24,[[["self"],["plugininitializeresponse"]],["bool"]]],[11,"eq","","",23,[[["self"],["frontendrunresponse"]],["bool"]]],[11,"ne","","",23,[[["self"],["frontendrunresponse"]],["bool"]]],[11,"eq","","",27,[[["self"],["gatestreamdown"]],["bool"]]],[11,"ne","","",27,[[["self"],["gatestreamdown"]],["bool"]]],[11,"eq","","",28,[[["self"],["pipelinedgatestreamdown"]],["bool"]]],[11,"ne","","",28,[[["self"],["pipelinedgatestreamdown"]],["bool"]]],[11,"eq","","",29,[[["self"],["gatestreamup"]],["bool"]]],[11,"ne","","",29,[[["self"],["gatestreamup"]],["bool"]]],[11,"eq","dqcsim::common::types","",92,[[["self"],["sequencenumber"]],["bool"]]],[11,"ne","","",92,[[["self"],["sequencenumber"]],["bool"]]],[11,"eq","","",94,[[["self"],["cycle"]],["bool"]]],[11,"ne","","",94,[[["self"],["cycle"]],["bool"]]],[11,"eq","","",95,[[["qubitref"],["self"]],["bool"]]],[11,"ne","","",95,[[["qubitref"],["self"]],["bool"]]],[11,"eq","","",97,[[["arbdata"],["self"]],["bool"]]],[11,"ne","","",97,[[["arbdata"],["self"]],["bool"]]],[11,"eq","","",98,[[["self"],["arbcmd"]],["bool"]]],[11,"ne","","",98,[[["self"],["arbcmd"]],["bool"]]],[11,"eq","","",32,[[["gatetype"],["self"]],["bool"]]],[11,"ne","","",32,[[["gatetype"],["self"]],["bool"]]],[11,"eq","","",30,[[["gate"],["self"]],["bool"]]],[11,"ne","","",30,[[["gate"],["self"]],["bool"]]],[11,"eq","","",33,[[["qubitmeasurementvalue"],["self"]],["bool"]]],[11,"eq","","",31,[[["qubitmeasurementresult"],["self"]],["bool"]]],[11,"ne","","",31,[[["qubitmeasurementresult"],["self"]],["bool"]]],[11,"eq","","",34,[[["plugintype"],["self"]],["bool"]]],[11,"eq","","",99,[[["self"],["pluginmetadata"]],["bool"]]],[11,"ne","","",99,[[["self"],["pluginmetadata"]],["bool"]]],[11,"eq","","",100,[[["self"]],["bool"]]],[11,"eq","dqcsim::host::configuration","",45,[[["envmod"],["self"]],["bool"]]],[11,"ne","","",45,[[["envmod"],["self"]],["bool"]]],[11,"eq","","",46,[[["streamcapturemode"],["self"]],["bool"]]],[11,"ne","","",46,[[["streamcapturemode"],["self"]],["bool"]]],[11,"eq","","",37,[[["seed"],["self"]],["bool"]]],[11,"ne","","",37,[[["seed"],["self"]],["bool"]]],[11,"eq","","",47,[[["self"],["timeout"]],["bool"]]],[11,"ne","","",47,[[["self"],["timeout"]],["bool"]]],[11,"eq","","",38,[[["pluginlogconfiguration"],["self"]],["bool"]]],[11,"ne","","",38,[[["pluginlogconfiguration"],["self"]],["bool"]]],[11,"eq","","",42,[[["self"],["pluginprocessspecification"]],["bool"]]],[11,"ne","","",42,[[["self"],["pluginprocessspecification"]],["bool"]]],[11,"eq","","",40,[[["pluginprocessfunctionalconfiguration"],["self"]],["bool"]]],[11,"ne","","",40,[[["pluginprocessfunctionalconfiguration"],["self"]],["bool"]]],[11,"eq","","",41,[[["pluginprocessnonfunctionalconfiguration"],["self"]],["bool"]]],[11,"ne","","",41,[[["pluginprocessnonfunctionalconfiguration"],["self"]],["bool"]]],[11,"eq","","",39,[[["self"],["pluginprocessconfiguration"]],["bool"]]],[11,"ne","","",39,[[["self"],["pluginprocessconfiguration"]],["bool"]]],[11,"eq","","",48,[[["self"],["reproductionpathstyle"]],["bool"]]],[11,"eq","dqcsim::host::reproduction","",54,[[["self"],["hostcall"]],["bool"]]],[11,"ne","","",54,[[["self"],["hostcall"]],["bool"]]],[11,"eq","","",51,[[["pluginreproduction"],["self"]],["bool"]]],[11,"ne","","",51,[[["pluginreproduction"],["self"]],["bool"]]],[11,"eq","","",53,[[["reproduction"],["self"]],["bool"]]],[11,"ne","","",53,[[["reproduction"],["self"]],["bool"]]],[11,"eq","dqcsim::plugin::connection","",56,[[["incomingmessage"],["self"]],["bool"]]],[11,"ne","","",56,[[["incomingmessage"],["self"]],["bool"]]],[11,"eq","","",57,[[["self"],["outgoingmessage"]],["bool"]]],[11,"ne","","",57,[[["self"],["outgoingmessage"]],["bool"]]],[11,"eq","dqcsim::bindings","",59,[[["dqcs_handle_type_t"],["self"]],["bool"]]],[11,"eq","","",60,[[["self"],["dqcs_plugin_type_t"]],["bool"]]],[11,"eq","","",61,[[["dqcs_loglevel_t"],["self"]],["bool"]]],[11,"eq","","",62,[[["self"],["dqcs_return_t"]],["bool"]]],[11,"eq","","",63,[[["dqcs_bool_return_t"],["self"]],["bool"]]],[11,"eq","","",64,[[["dqcs_measurement_t"],["self"]],["bool"]]],[11,"eq","","",65,[[["dqcs_path_style_t"],["self"]],["bool"]]],[11,"eq","","",66,[[["self"],["dqcs_predefined_gate_t"]],["bool"]]],[11,"eq","","",67,[[["dqcs_basis_t"],["self"]],["bool"]]],[11,"eq","","",68,[[["dqcs_gate_type_t"],["self"]],["bool"]]],[11,"partial_cmp","dqcsim::common::log","",13,[[["self"],["loglevel"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",14,[[["self"],["loglevelfilter"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","dqcsim::common::error","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::gates","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::log::callback","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::common::log::proxy","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::log::tee_file","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::log::thread","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::log","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::protocol","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::types","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::host::configuration","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::host::plugin::process","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::host::plugin::thread","",102,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::host::reproduction","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::host::simulation","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::host::simulator","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::plugin::connection","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::plugin::definition","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::bindings","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::error","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::common::log::tee_file","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Turns the TeeFile object into a string representation that…",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","dqcsim::common::log","",13,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::common::types","",92,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",94,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",95,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Turns the ArbData object into a string representation that…",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Turns the ArbCmd object into a string representation that…",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","dqcsim::host::configuration","Turns the EnvMod object into a string representation that…",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Turns the Timeout object into a string representation that…",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","dqcsim::host::reproduction","Turns the HostCall object into a string representation…",54,[[["self"],["formatter"]],["result"]]],[11,"sub","dqcsim::common::types","",94,[[["cycledelta"]],["cycle"]]],[11,"sub","","",94,[[["cycle"]],["cycledelta"]]],[11,"try_from","dqcsim::common::gates","",11,[[["unitarygatetype"]],["result"]]],[11,"try_from","dqcsim::common::types","",100,[[["unitarygatetype"]],["result"]]],[11,"try_from","","",100,[[["vec",["complex64"]],["complex64"]],["result"]]],[11,"try_from","dqcsim::common::gates","",10,[[["dqcs_predefined_gate_t"]],["result"]]],[11,"try_from","dqcsim::common::types","",35,[[["dqcs_basis_t"]],["result"]]],[11,"from_str","dqcsim::common::log::tee_file","Constructs a TeeFile from its string representation, which…",16,[[["str"]],["result"]]],[11,"from_str","dqcsim::common::log","",13,[[["str"]],[["result",["loglevel"]],["loglevel"]]]],[11,"from_str","","",14,[[["str"]],[["result",["loglevelfilter"]],["loglevelfilter"]]]],[11,"from_str","dqcsim::common::types","Constructs an ArgData from its string representation.",97,[[["str"]],["result"]]],[11,"from_str","","Constructs an ArbCmd from its string representation. The…",98,[[["str"]],["result"]]],[11,"from_str","dqcsim::host::configuration","Constructs an EnvMod from its string representation, which…",45,[[["str"]],["result"]]],[11,"from_str","","",46,[[["str"]],["result"]]],[11,"from_str","","Constructs a Timeout from its string representation.",47,[[["str"]],["result"]]],[11,"from_str","","",48,[[["str"]],[["result",["reproductionpathstyle"]],["reproductionpathstyle"]]]],[11,"from_str","dqcsim::host::reproduction","Constructs a HostCall from its string representation,…",54,[[["str"]],["result"]]],[11,"add","dqcsim::common::types","",94,[[["cycledelta"]],["cycle"]]],[11,"index","","",100,[[["self"]]]],[11,"index","","",100,[[["self"],["usize"]]]],[11,"index_mut","","",100,[[["self"]]]],[11,"index_mut","","",100,[[["self"],["usize"]]]],[11,"hash","dqcsim::common::gates","",10,[[["self"],["__h"]]]],[11,"hash","dqcsim::common::types","",92,[[["self"],["__h"]]]],[11,"hash","","",94,[[["self"],["__h"]]]],[11,"hash","","",95,[[["self"],["__h"]]]],[11,"hash","","",97,[[["self"],["__h"]]]],[11,"hash","","",32,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"serialize","dqcsim::common::log::tee_file","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","dqcsim::common::log","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",87,[[["self"],["__s"]],["result"]]],[11,"serialize","","",88,[[["self"],["__s"]],["result"]]],[11,"serialize","dqcsim::common::protocol","",25,[[["self"],["__s"]],["result"]]],[11,"serialize","","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","","",24,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",27,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["self"],["__s"]],["result"]]],[11,"serialize","","",29,[[["self"],["__s"]],["result"]]],[11,"serialize","dqcsim::common::types","",92,[[["self"],["__s"]],["result"]]],[11,"serialize","","",94,[[["self"],["__s"]],["result"]]],[11,"serialize","","",95,[[["self"],["__s"]],["result"]]],[11,"serialize","","",97,[[["self"],["__s"]],["result"]]],[11,"serialize","","",98,[[["self"],["__s"]],["result"]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"serialize","","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","","",33,[[["self"],["__s"]],["result"]]],[11,"serialize","","",31,[[["self"],["__s"]],["result"]]],[11,"serialize","","",34,[[["self"],["__s"]],["result"]]],[11,"serialize","","",99,[[["self"],["__s"]],["result"]]],[11,"serialize","","",100,[[["self"],["__s"]],["result"]]],[11,"serialize","dqcsim::host::configuration","",45,[[["self"],["__s"]],["result"]]],[11,"serialize","","",46,[[["self"],["__s"]],["result"]]],[11,"serialize","","",37,[[["self"],["__s"]],["result"]]],[11,"serialize","","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","","",42,[[["self"],["__s"]],["result"]]],[11,"serialize","","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","","",41,[[["self"],["__s"]],["result"]]],[11,"serialize","","",39,[[["self"],["__s"]],["result"]]],[11,"serialize","","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","dqcsim::host::reproduction","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",53,[[["self"],["__s"]],["result"]]],[11,"deserialize","dqcsim::common::log::tee_file","",16,[[["__d"]],["result"]]],[11,"deserialize","dqcsim::common::log","",13,[[["__d"]],["result"]]],[11,"deserialize","","",14,[[["__d"]],["result"]]],[11,"deserialize","","",87,[[["__d"]],["result"]]],[11,"deserialize","","",88,[[["__d"]],["result"]]],[11,"deserialize","dqcsim::common::protocol","",25,[[["__d"]],["result"]]],[11,"deserialize","","",21,[[["__d"]],["result"]]],[11,"deserialize","","",22,[[["__d"]],["result"]]],[11,"deserialize","","",20,[[["__d"]],["result"]]],[11,"deserialize","","",26,[[["__d"]],["result"]]],[11,"deserialize","","",24,[[["__d"]],["result"]]],[11,"deserialize","","",23,[[["__d"]],["result"]]],[11,"deserialize","","",27,[[["__d"]],["result"]]],[11,"deserialize","","",28,[[["__d"]],["result"]]],[11,"deserialize","","",29,[[["__d"]],["result"]]],[11,"deserialize","dqcsim::common::types","",92,[[["__d"]],["result"]]],[11,"deserialize","","",94,[[["__d"]],["result"]]],[11,"deserialize","","",95,[[["__d"]],["result"]]],[11,"deserialize","","",97,[[["__d"]],["result"]]],[11,"deserialize","","",98,[[["__d"]],["result"]]],[11,"deserialize","","",32,[[["__d"]],["result"]]],[11,"deserialize","","",30,[[["__d"]],["result"]]],[11,"deserialize","","",33,[[["__d"]],["result"]]],[11,"deserialize","","",31,[[["__d"]],["result"]]],[11,"deserialize","","",34,[[["__d"]],["result"]]],[11,"deserialize","","",99,[[["__d"]],["result"]]],[11,"deserialize","","",100,[[["__d"]],["result"]]],[11,"deserialize","dqcsim::host::configuration","",45,[[["__d"]],["result"]]],[11,"deserialize","","",46,[[["__d"]],["result"]]],[11,"deserialize","","",37,[[["__d"]],["result"]]],[11,"deserialize","","",47,[[["__d"]],["result"]]],[11,"deserialize","","",38,[[["__d"]],["result"]]],[11,"deserialize","","",42,[[["__d"]],["result"]]],[11,"deserialize","","",40,[[["__d"]],["result"]]],[11,"deserialize","","",41,[[["__d"]],["result"]]],[11,"deserialize","","",39,[[["__d"]],["result"]]],[11,"deserialize","","",48,[[["__d"]],["result"]]],[11,"deserialize","dqcsim::host::reproduction","",54,[[["__d"]],["result"]]],[11,"deserialize","","",51,[[["__d"]],["result"]]],[11,"deserialize","","",53,[[["__d"]],["result"]]],[11,"name","dqcsim::common::error","",9,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","",9,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","",9,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"cause","","",84,[[["self"]],[["fail"],["option",["fail"]]]]],[11,"backtrace","","",84,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"name","dqcsim::common::log::tee_file","",18,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","",18,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","",18,[[["self"]],[["backtrace"],["option",["backtrace"]]]]],[11,"type_name","dqcsim::common::log","",13,[[],["str"]]],[11,"short_type_name","","",13,[[],["str"]]],[11,"type_name","","",14,[[],["str"]]],[11,"short_type_name","","",14,[[],["str"]]],[11,"type_name","dqcsim::host::configuration","",48,[[],["str"]]],[11,"short_type_name","","",48,[[],["str"]]],[11,"iter","dqcsim::common::log","",13,[[],["logleveliter"]]],[11,"iter","","",14,[[],["loglevelfilteriter"]]],[11,"iter","dqcsim::host::configuration","",48,[[],["reproductionpathstyleiter"]]],[11,"new","dqcsim::common::converter","",77,[[["option",["usize"]],["usize"]],["umatrixconverter"]]],[11,"new","","",78,[[["option",["usize"]],["usize"],["f64"],["t"],["bool"]],["self"]]],[11,"new","","",80,[[["option",["usize"]],["matrix"],["usize"],["f64"]],["self"]]],[11,"new","","",81,[[["option",["usize"]],["matrix"],["usize"],["f64"]],["self"]]],[11,"new","","",82,[[],["customgateconverter"]]],[11,"new","","Constructs a new empty ConverterMap.",83,[[["box",["fn"]],["option",["box"]]],["self"]]],[11,"push","","Appends a Converter with the specified key to the back of…",83,[[["box",["converter"]],["self"],["converter"]]]],[11,"insert","","Inserts a Converter at position index within the…",83,[[["converter"],["box",["converter"]],["usize"],["self"]]]],[11,"with","","Appends the specified Converter with the corresponding…",83,[[["converter"],["box",["converter"]]],["self"]]],[11,"clear_cache","","Clears the cache.",83,[[["self"]]]],[11,"len","","Returns the number of Detectors in the collection.",83,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the collection contains no Detectors.",83,[[["self"]],["bool"]]],[11,"into_gate_converter","dqcsim::common::gates","",10,[[["option",["usize"]],["usize"],["f64"],["bool"]],[["box",["converter"]],["converter"]]]],[11,"new","dqcsim::common::log::callback","Constructs a new LogCallback.",15,[[["box",["fn"]],["fn"],["loglevelfilter"]],["logcallback"]]],[11,"boxed","dqcsim::common::log::proxy","Return a new boxed LogProxy for the provided sender and…",89,[[["loglevelfilter"],["t"]],[["box",["logproxy"]],["logproxy"]]]],[11,"new","dqcsim::common::log::tee_file","Constructs a new TeeFileConfiguration with the provided…",16,[[],["teefileconfiguration"]]],[11,"new","","Constructs a new tee file. Consumes the provided…",17,[[["teefileconfiguration"]],[["result",["teefile"]],["teefile"]]]],[11,"spawn","dqcsim::common::log::thread","Spawn a [`LogThread`].",90,[[["loglevelfilter"],["logcallback"],["teefileconfiguration"],["option",["logcallback"]],["vec",["teefileconfiguration"]]],[["logthread"],["result",["logthread"]]]]],[11,"get_sender","","",90,[[["self"]],[["logrecord"],["sender",["logrecord"]]]]],[11,"get_ipc_sender","","",90,[[["self"]],[["logrecord"],["ipcsender",["logrecord"]]]]],[11,"try_from","dqcsim::common::log","Attempt to convert a LoglevelFilter to a Loglevel.",13,[[["loglevelfilter"]],[["result",["loglevel"]],["loglevel"]]]],[11,"payload","","",88,[[["self"]],["str"]]],[11,"level","","",88,[[["self"]],["loglevel"]]],[11,"module_path","","",88,[[["self"]],[["str"],["option",["str"]]]]],[11,"file","","",88,[[["self"]],[["str"],["option",["str"]]]]],[11,"line","","",88,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"timestamp","","",88,[[["self"]],["systemtime"]]],[11,"process","","",88,[[["self"]],["u32"]]],[11,"thread","","",88,[[["self"]],["u64"]]],[11,"logger","","",88,[[["self"]],["str"]]],[11,"new","","",88,[[["u32"],["loglevel"],["u64"]],["logrecord"]]],[11,"acknowledges","dqcsim::common::types","Returns true if receiving this sequence number in a…",92,[[["sequencenumber"]],["bool"]]],[11,"after","","Returns true if this sequence number comes after the given…",92,[[["sequencenumber"]],["bool"]]],[11,"preceding","","Returns the sequence number that comes before this one.",92,[[],["sequencenumber"]]],[11,"none","","\"None\" value for sequence numbers, used to indicate that…",92,[[],["sequencenumber"]]],[11,"new","","Constructs a new sequence number generator.",93,[[],["sequencenumbergenerator"]]],[11,"get_next","","Acquires the next sequence number.",93,[[["self"]],["sequencenumber"]]],[11,"get_previous","","Returns the previously acquired sequence number.",93,[[["self"]],["sequencenumber"]]],[11,"t_zero","","Returns the first simulation cycle.",94,[[],["cycle"]]],[11,"advance","","Advances by the specified number of cycles.",94,[[["cycles"]],["cycle"]]],[11,"null","","Returns a null qubit reference.",95,[[],["qubitref"]]],[11,"is_null","","Returns whether this reference is null.",95,[[],["bool"]]],[11,"from_foreign","","Converts the foreign representation of a qubit reference…",95,[[["u64"]],[["option",["qubitref"]],["qubitref"]]]],[11,"to_foreign","","Converts the type-safe Rust representation of a qubit…",95,[[],[["result",["u64"]],["u64"]]]],[11,"option_to_foreign","","Converts the type-safe Rust representation of a qubit…",95,[[["option",["qubitref"]],["qubitref"]],[["result",["u64"]],["u64"]]]],[11,"new","","Constructs a new reference generator.",96,[[],["qubitrefgenerator"]]],[11,"allocate","","\"Allocates\" a number of qubit references.",96,[[["self"],["usize"]],[["vec",["qubitref"]],["qubitref"]]]],[11,"free","","\"Frees\" a number of qubit references.",96,[[["self"]]]],[11,"from_str_args_only","","Constructs an ArgData from a string containing only one or…",97,[[["str"]],["result"]]],[11,"from_args","","Construct an `ArbData` with just binary arguments and {}…",97,[[],["self"]]],[11,"from_cbor","","Construct an `ArbData` from a CBOR object and binary…",97,[[],["result"]]],[11,"from_json","","Construct an `ArbData` from a JSON object and binary…",97,[[],["result"]]],[11,"get_json","","Returns the JSON/CBOR data field as a JSON string.",97,[[["self"]],[["result",["string"]],["string"]]]],[11,"get_cbor","","Returns the JSON/CBOR data field as a CBOR string.",97,[[["self"]]]],[11,"get_args","","Provides a reference to the binary argument vector.",97,[[["self"]]]],[11,"get_args_mut","","Provides a mutable reference to the binary argument vector.",97,[[["self"]],["vec"]]],[11,"set_json","","Sets the JSON/CBOR data field by means of a JSON string.",97,[[["self"]],["result"]]],[11,"set_cbor","","Sets the JSON/CBOR data field by means of a CBOR string.",97,[[["self"]],["result"]]],[11,"set_args","","Provides a reference to the binary argument vector.",97,[[["self"]]]],[11,"clear_cbor","","Resets the CBOR to an empty object.",97,[[["self"]]]],[11,"clear_args","","Clears the binary arguments vector.",97,[[["self"]]]],[11,"clear","","Clears the CBOR object and binary arguments vector.",97,[[["self"]]]],[11,"copy_from","","Copies the data from another ArbData to this one.",97,[[["arbdata"],["self"]]]],[11,"new","","Constructs an ArbCmd.",98,[[["arbdata"]],["arbcmd"]]],[11,"try_from","","Constructs an ArbCmd.",98,[[["arbdata"]],[["arbcmd"],["result",["arbcmd"]]]]],[11,"interface_identifier","","Returns a reference to the interface identifier for this…",98,[[["self"]],["str"]]],[11,"operation_identifier","","Returns a reference to the operation identifier for this…",98,[[["self"]],["str"]]],[11,"data","","Returns a reference to the data for this ArbCmd.",98,[[["self"]],["arbdata"]]],[11,"data_mut","","Returns a mutable reference to the data for this ArbCmd.",98,[[["self"]],["arbdata"]]],[11,"new_unitary","","Constructs a new unitary gate.",30,[[],[["gate"],["result",["gate"]]]]],[11,"new_measurement","","Constructs a new measurement gate.",30,[[],[["gate"],["result",["gate"]]]]],[11,"new_prep","","Constructs a new prep gate.",30,[[],[["gate"],["result",["gate"]]]]],[11,"new_custom","","Constructs a new implementation-defined gate.",30,[[["option"]],[["gate"],["result",["gate"]]]]],[11,"get_type","","Returns the gate type.",30,[[["self"]],["gatetype"]]],[11,"get_name","","Returns the name of the gate, if any.",30,[[["self"]],[["str"],["option",["str"]]]]],[11,"get_targets","","Returns the list of target qubits.",30,[[["self"]]]],[11,"get_controls","","Returns the list of control qubits.",30,[[["self"]]]],[11,"get_measures","","Returns the list of measured qubits.",30,[[["self"]]]],[11,"get_matrix","","Returns the gate matrix.",30,[[["self"]],[["matrix"],["option",["matrix"]]]]],[11,"with_matrix_controls","","Returns a new Gate with its controls moved to the matrix.",30,[[["self"]],["self"]]],[11,"with_gate_controls","","Returns a new Gate with controls encoded in the matrix…",30,[[["f64"],["self"],["bool"]],["self"]]],[11,"without_qubit_refs","","Replaces all qubit references in the gate with undefined…",30,[[["self"]],["self"]]],[11,"is_undefined","","",33,[[],["bool"]]],[11,"is_zero","","",33,[[],["bool"]]],[11,"is_one","","",33,[[],["bool"]]],[11,"new","","",31,[[],["qubitmeasurementresult"]]],[11,"new","","Constructs a new plugin metadata record.",99,[[],["pluginmetadata"]]],[11,"get_name","","Returns the name of the plugin implementation.",99,[[["self"]],["str"]]],[11,"get_author","","Returns the author of the plugin.",99,[[["self"]],["str"]]],[11,"get_version","","Returns the plugin version.",99,[[["self"]],["str"]]],[11,"new","","Returns a new Matrix with provided elements.",100,[[],["result"]]],[11,"new_identity","","Returns a new identity Matrix with given dimension.",100,[[["usize"]],["self"]]],[11,"approx_eq","","Approximately compares this Matrix with another Matrix.…",100,[[["bool"],["f64"],["self"],["matrix"]],["bool"]]],[11,"basis_approx_eq","","Approximately compares two matrices representing bases…",100,[[["f64"],["self"],["matrix"]],["bool"]]],[11,"approx_unitary","","Checks whether this Matrix is approximately unitary by…",100,[[["f64"],["self"]],["bool"]]],[11,"add_controls","","Returns new Matrix with `number_of_control` qubits added.",100,[[["self"],["usize"]],["self"]]],[11,"strip_control","","Returns new Matrix with control behavior removed from the…",100,[[["f64"],["self"],["bool"]]]],[11,"len","","Returns the number of elements in the Matrix.",100,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the Matrix is empty.",100,[[["self"]],["bool"]]],[11,"dimension","","Returns the dimension of the Matrix. The dimension equals…",100,[[["self"]],["usize"]]],[11,"num_qubits","","Returns the number of qubits for this Matrix.",100,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"get","","Returns the element at given row and colum index. Returns…",100,[[["self"],["usize"]],[["option",["complex64"]],["complex64"]]]],[11,"set","dqcsim::host::configuration","Convenience method for building EnvMod::Set.",45,[[],["envmod"]]],[11,"remove","","Convenience method for building EnvMod::Remove.",45,[[],["envmod"]]],[11,"from_seconds","","Creates a timeout from an integer time in seconds.",47,[[["u64"]],["timeout"]]],[11,"from_millis","","Creates a timeout from an integer time in milliseconds.",47,[[["u64"]],["timeout"]]],[11,"infinite","","Creates an infinite timeout.",47,[[],["timeout"]]],[11,"try_from_double","","Creates a timeout from an floating point time in seconds.",47,[[["f64"]],[["timeout"],["result",["timeout"]]]]],[11,"to_double","","Returns the timeout as a floating point time in seconds.",47,[[["self"]],["f64"]]],[11,"new","","Returns a new PluginLogConfiguration.…",38,[[["loglevelfilter"]],["pluginlogconfiguration"]]],[11,"new","","Constructs a new plugin specification.",42,[[["option"]],["pluginprocessspecification"]]],[11,"from_sugar","","Constructs a plugin specification from a \"sugared\"…",42,[[["plugintype"]],[["result",["pluginprocessspecification"]],["pluginprocessspecification"]]]],[11,"new","","Creates a new plugin configuration.",39,[[["pluginprocessspecification"]],["pluginprocessconfiguration"]]],[11,"new","","Creates a new plugin configuration.",43,[[["pluginlogconfiguration"],["plugindefinition"]],["pluginthreadconfiguration"]]],[11,"new_raw","","Creates a new plugin through a custom closure.",43,[[["plugintype"],["pluginlogconfiguration"],["pluginthreadclosure"]],["pluginthreadconfiguration"]]],[11,"with_init_cmd","","Adds an init cmd to the list, builder style.",43,[[],["pluginthreadconfiguration"]]],[11,"get_name","","",49,[[["self"]],["string"]]],[11,"convert_path","","Converts a path as specified by the underlying…",48,[[["path"]],[["pathbuf"],["result",["pathbuf"]]]]],[11,"convert_path_option","","Convenience function that applies `convert_path()` on the…",48,[[["option"]],[["result",["option"]],["option",["pathbuf"]]]]],[11,"with_seed","","Sets the random seed.",44,[[],["simulatorconfiguration"]]],[11,"with_stderr_level","","Sets the stderr loglevel.",44,[[],["simulatorconfiguration"]]],[11,"with_tee_file","","Adds a tee file.",44,[[],["simulatorconfiguration"]]],[11,"with_log_callback","","Sets the log callback.",44,[[],["simulatorconfiguration"]]],[11,"with_dqcsim_level","","Sets the verbosity for DQCsim itself.",44,[[],["simulatorconfiguration"]]],[11,"with_plugin","","Adds a new plugin to the pipeline.",44,[[],["simulatorconfiguration"]]],[11,"with_reproduction_path_style","","Sets the reproduction path style.",44,[[],["simulatorconfiguration"]]],[11,"without_reproduction","","Disables the reproduction logging system.",44,[[],["simulatorconfiguration"]]],[11,"without_logging","","Disables all logging methods by setting `stderr_level` and…",44,[[],["simulatorconfiguration"]]],[11,"optimize_loglevels","","Optimizes the source verbosity levels, such that they are…",44,[[["self"]]]],[11,"check_plugin_list","","Verifies that the plugins are specified correctly.",44,[[["self"]],["result"]]],[11,"new","dqcsim::host::plugin::process","Constructs a new PluginProcess based on a…",101,[[["pluginprocessconfiguration"]],["pluginprocess"]]],[11,"new","dqcsim::host::plugin::thread","Constructs a plugin thread from a plugin definition and…",102,[[["pluginthreadconfiguration"]],["pluginthread"]]],[11,"name","dqcsim::host::plugin","Returns the name of this plugin from its logging…",50,[[["self"]],["string"]]],[11,"initialize","","Sends an `PluginInitializeRequest` to this plugin.",50,[[["option"],["self"],["u64"],["logthread"]],[["result",["plugininitializeresponse"]],["plugininitializeresponse"]]]],[11,"accept_upstream","","Requests that the plugin waits for the upstream plugin to…",50,[[["self"]],["result"]]],[11,"user_initialize","","Send user initialize request to the plugin. This invokes…",50,[[["self"]],["result"]]],[11,"arb","","Sends an `ArbCmd` message to this plugin.",50,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"apply","dqcsim::host::reproduction","Applies this plugin modification to a plugin definition…",52,[[["vec"]],["result"]]],[11,"new_logger","","Constructs a reproduction structure for tracking a…",53,[[["simulatorconfiguration"]],[["reproduction"],["result",["reproduction"]]]]],[11,"record","","Records a host call to the reproduction log.",53,[[["self"],["hostcall"]]]],[11,"to_run","","Turns this reproduction structure into a configuration and…",53,[[["simulatorconfiguration"],["self"],["bool"]],[["vec",["hostcall"]],["result",["vec"]]]]],[11,"from_file","","Constructs a reproduction structure from a file.",53,[[],[["reproduction"],["result",["reproduction"]]]]],[11,"to_file","","Writes a reproduction structure to a file.",53,[[["self"]],["result"]]],[11,"new","dqcsim::host::simulation","Constructs a Simulation from a collection of…",103,[[["pipeline"],["seed"],["option",["reproduction"]],["reproduction"],["logthread"]],[["result",["simulation"]],["simulation"]]]],[11,"drop_plugins","","Drains the plugin pipeline so their drop() implementations…",103,[[["self"]]]],[11,"accelerator","","",103,[[["self"]],["box"]]],[11,"accelerator_mut","","",103,[[["self"]],["box"]]],[11,"yield_to_accelerator","","Yields to the accelerator.",103,[[["self"]],["result"]]],[11,"arb","","Sends an `ArbCmd` message to one of the plugins,…",103,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"arb_idx","","Sends an `ArbCmd` message to one of the plugins,…",103,[[["isize"],["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"get_metadata","","Returns a reference to the metadata object belonging to…",103,[[["self"]],[["result",["pluginmetadata"]],["pluginmetadata"]]]],[11,"get_metadata_idx","","Returns a reference to the metadata object belonging to…",103,[[["isize"],["self"]],[["result",["pluginmetadata"]],["pluginmetadata"]]]],[11,"write_reproduction_file","","Writes a the reproduction log to a file.",103,[[["self"]],["result"]]],[11,"new","dqcsim::host::simulator","Constructs a Simulator driver.",55,[[["simulatorconfiguration"]],[["result",["simulator"]],["simulator"]]]],[11,"new","dqcsim::plugin::connection","Construct a Connection wrapper instance.",104,[[],[["connection"],["result",["connection"]]]]],[11,"connect_downstream","","Connects to a downstream plugin.",104,[[["self"]],["result"]]],[11,"serve_upstream","","Creates a one-shot server for an upstream plugin to…",104,[[["self"]],[["result",["string"]],["string"]]]],[11,"accept_upstream","","Waits for an upstream plugin to connect to our one-shot…",104,[[["self"]],["result"]]],[11,"send","","Send an OutgoingMessage.",104,[[["self"],["outgoingmessage"]],["result"]]],[11,"next_request","","Fetch next request from either the Simulator request…",104,[[["self"]],[["result",["option"]],["option",["incomingmessage"]]]]],[11,"next_downstream_request","","Fetch next downstream request.",104,[[["self"]],[["result",["option"]],["option",["incomingmessage"]]]]],[11,"new","dqcsim::plugin::definition","Constructs a new plugin definition with default callbacks.",58,[[["plugintype"]],["plugindefinition"]]],[11,"get_type","","Returns the plugin type.",58,[[["self"]],["plugintype"]]],[11,"set_type","","Sets the type of the plugin.",58,[[["self"],["plugintype"]]]],[11,"get_metadata","","Returns the plugin metadata.",58,[[["self"]],["pluginmetadata"]]],[11,"run","dqcsim::plugin::state","Executes a plugin described by `definition` within the…",105,[[["plugindefinition"]],["result"]]],[11,"send","","Sends a message to the host.",105,[[["self"],["arbdata"]],["result"]]],[11,"recv","","Waits for a message from the host.",105,[[["self"]],[["result",["arbdata"]],["arbdata"]]]],[11,"allocate","","Allocate the given number of downstream qubits.",105,[[["arbcmd"],["usize"],["self"],["vec",["arbcmd"]]],[["vec",["qubitref"]],["result",["vec"]]]]],[11,"free","","Free the given downstream qubits.",105,[[["vec",["qubitref"]],["self"],["qubitref"]],["result"]]],[11,"gate","","Tells the downstream plugin to execute a gate.",105,[[["self"],["gate"]],["result"]]],[11,"get_measurement","","Returns the latest measurement of the given downstream…",105,[[["self"],["qubitref"]],[["result",["qubitmeasurementresult"]],["qubitmeasurementresult"]]]],[11,"get_cycles_since_measure","","Returns the number of downstream cycles since the latest…",105,[[["self"],["qubitref"]],[["result",["u64"]],["u64"]]]],[11,"get_cycles_between_measures","","Returns the number of downstream cycles between the last…",105,[[["self"],["qubitref"]],[["result",["u64"]],["u64"]]]],[11,"advance","","Tells the downstream plugin to run for the specified…",105,[[["self"],["cycles"]],[["result",["cycle"]],["cycle"]]]],[11,"get_cycle","","Returns the current value of the downstream cycle counter.",105,[[["self"]],[["result",["cycle"]],["cycle"]]]],[11,"arb","","Sends an arbitrary command downstream.",105,[[["self"],["arbcmd"]],[["result",["arbdata"]],["arbdata"]]]],[11,"random_u64","","Generates a random unsigned 64-bit number using the…",105,[[["self"]],["u64"]]],[11,"random_f64","","Generates a random floating point number using the…",105,[[["self"]],["f64"]]]],"p":[[8,"Channel"],[8,"Sender"],[8,"Receiver"],[8,"FromArb"],[8,"ToArb"],[8,"Converter"],[8,"MatrixConverter"],[8,"MatrixConverterArb"],[8,"ResultExt"],[4,"ErrorKind"],[4,"UnitaryGateType"],[4,"UnboundUnitaryGate"],[4,"BoundUnitaryGate"],[4,"Loglevel"],[4,"LoglevelFilter"],[3,"LogCallback"],[3,"TeeFileConfiguration"],[3,"TeeFile"],[4,"TeeFileError"],[8,"Log"],[3,"FrontendRunRequest"],[3,"PluginInitializeRequest"],[3,"PluginUserInitializeRequest"],[3,"FrontendRunResponse"],[3,"PluginInitializeResponse"],[4,"SimulatorToPlugin"],[4,"PluginToSimulator"],[4,"GatestreamDown"],[4,"PipelinedGatestreamDown"],[4,"GatestreamUp"],[3,"Gate"],[3,"QubitMeasurementResult"],[4,"GateType"],[4,"QubitMeasurementValue"],[4,"PluginType"],[4,"Basis"],[8,"Accelerator"],[3,"Seed"],[3,"PluginLogConfiguration"],[3,"PluginProcessConfiguration"],[3,"PluginProcessFunctionalConfiguration"],[3,"PluginProcessNonfunctionalConfiguration"],[3,"PluginProcessSpecification"],[3,"PluginThreadConfiguration"],[3,"SimulatorConfiguration"],[4,"EnvMod"],[4,"StreamCaptureMode"],[4,"Timeout"],[4,"ReproductionPathStyle"],[8,"PluginConfiguration"],[8,"Plugin"],[3,"PluginReproduction"],[3,"PluginModification"],[3,"Reproduction"],[4,"HostCall"],[3,"Simulator"],[4,"IncomingMessage"],[4,"OutgoingMessage"],[3,"PluginDefinition"],[4,"dqcs_handle_type_t"],[4,"dqcs_plugin_type_t"],[4,"dqcs_loglevel_t"],[4,"dqcs_return_t"],[4,"dqcs_bool_return_t"],[4,"dqcs_measurement_t"],[4,"dqcs_path_style_t"],[4,"dqcs_predefined_gate_t"],[4,"dqcs_basis_t"],[4,"dqcs_gate_type_t"],[3,"dqcs_plugin_state_t"],[3,"FixedMatrixConverter"],[3,"RxMatrixConverter"],[3,"RyMatrixConverter"],[3,"RzMatrixConverter"],[3,"PhaseMatrixConverter"],[3,"PhaseKMatrixConverter"],[3,"RMatrixConverter"],[3,"UMatrixConverter"],[3,"UnitaryConverter"],[3,"UnitaryGateConverter"],[3,"MeasurementGateConverter"],[3,"PrepGateConverter"],[3,"CustomGateConverter"],[3,"ConverterMap"],[3,"Error"],[3,"LoglevelIter"],[3,"LoglevelFilterIter"],[3,"Metadata"],[3,"LogRecord"],[3,"LogProxy"],[3,"LogThread"],[3,"PluginAcceptUpstreamRequest"],[3,"SequenceNumber"],[3,"SequenceNumberGenerator"],[3,"Cycle"],[3,"QubitRef"],[3,"QubitRefGenerator"],[3,"ArbData"],[3,"ArbCmd"],[3,"PluginMetadata"],[3,"Matrix"],[3,"PluginProcess"],[3,"PluginThread"],[3,"Simulation"],[3,"Connection"],[3,"PluginState"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);